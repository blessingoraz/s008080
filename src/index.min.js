/* exported Util */

var Util = function () {

    var isiOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,
        untilTablet = isiOS ? screen.width < 750 : window.innerWidth < 750,
        wHeight = isiOS ? screen.height : window.innerHeight,
        // http://stackoverflow.com/questions/4629969/ios-return-bad-value-for-window-innerheight-width
    hasTouchEvents = Modernizr.touchevents,
        isRetina = checkForRetina();

    // smooth anchor scroll
    $(document).on('click', 'a[href*=\\#]', function (e) {
        e.preventDefault();

        var HrefOffset = $($.attr(this, 'href')).offset();

        if (HrefOffset) {
            $('html, body').animate({
                scrollTop: HrefOffset.top - 100
            }, 1000);
        }
    });

    function isOnViewport(elOffsetTop, elOffsetTopWithHeight, scrolled) {
        return scrolled + wHeight > elOffsetTop && elOffsetTopWithHeight > scrolled;
    }

    function objSize(obj) {
        var size = 0,
            key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) size++;
        }
        return size;
    }

    function objRandom(obj) {
        var result,
            prop,
            count = 0;
        for (prop in obj) {
            if (Math.random() < 1 / ++count) result = prop;
        }
        return result;
    }

    function stringSlugLower(str) {
        return str.replace(/ /g, '-').toLowerCase();
    }

    function randomNumb(arr) {
        return Array.isArray(arr) ? Math.floor(Math.random() * arr.length) : Math.floor(Math.random() * arr);
    }

    function scrollTo(value) {
        $('body').animate({ scrollTop: value }, 1500, 'swing');
    }

    function checkForRetina() {
        var mediaQuery = '(-webkit-min-device-pixel-ratio: 1.5),\
                (min--moz-device-pixel-ratio: 1.5),\
                (-o-min-device-pixel-ratio: 3/2),\
                (min-resolution: 1.5dppx)';

        return window.devicePixelRatio > 1 || window.matchMedia && window.matchMedia(mediaQuery).matches;
    }

    return {
        hasTouchEvents: hasTouchEvents,
        isOnViewport: isOnViewport,
        isRetina: isRetina,
        objSize: objSize,
        objRandom: objRandom,
        randomNumb: randomNumb,
        scrollTo: scrollTo,
        stringSlugLower: stringSlugLower,
        untilTablet: untilTablet,
        wHeight: wHeight
    };
}();

$.fn.extend({
    toggleText: function toggleText(a, b) {
        $.trim(this.html()) == a ? this.html(b) : this.html(a);
    }
});

// Swipped 1.0.0
// @sandrina-p - May 2017
// Based on https://gist.github.com/SleepWalker/da5636b1abcbaff48c4d

/* eslint-disable no-unused-vars */
var Swipped = function () {
    var doc = document.documentElement;

    // min px needed to trigger swipe
    var SWIPE_MIN = 40;

    // max px on opposite direction to prevent swipe
    // ex: on swipe left/right prevent if swipe top bottom is bigger than 75px
    var SWIPE_OPPOSITE_MAX = 75;

    // touch events coordinates
    var touchstartX = 0;
    var touchstartY = 0;
    var touchendX = 0;
    var touchendY = 0;

    // document scrolled coordinates
    var scrolled = {};
    var scrollStartTop = 0;
    var scrollStartLeft = 0;
    var scrollEndTop = 0;
    var scrollEndLeft = 0;

    // document total scrolled
    var scrolledTop = 0;
    var scrolledLeft = 0;

    function right(el, callback, args) {
        on(el, 'right', callback, args);
    }

    function left(el, callback, args) {
        on(el, 'left', callback, args);
    }

    function top(el, callback, args) {
        on(el, 'top', callback, args);
    }

    function down(el, callback, args) {
        on(el, 'down', callback, args);
    }

    function getScroll() {
        return {
            left: (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0),
            top: (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0)
        };
    }

    function on(el, direction, callback, args) {
        el.addEventListener('touchstart', function (event) {
            touchstartX = event.pageX;
            touchstartY = event.pageY;
            scrolled = getScroll();
            scrollStartTop = scrolled.top;
            scrollStartLeft = scrolled.left;
        }, false);

        el.addEventListener('touchend', function (event) {
            touchendX = event.pageX;
            touchendY = event.pageY;
            scrolled = getScroll();
            scrollEndTop = scrolled.top;
            scrollEndLeft = scrolled.left;
            handleSwipe(direction, callback, args);
        }, false);
    }

    function handleSwipe(direction, callback, args) {
        console.log('Swipped:', {
            touchstartX: touchstartX, touchendX: touchendX, touchstartY: touchstartY, touchendY: touchendY,
            scrollStartTop: scrollStartTop, scrollStartLeft: scrollStartLeft, scrollEndTop: scrollEndTop, scrollEndLeft: scrollEndLeft
        });

        scrolledTop = scrollEndTop + touchendY - (scrollStartTop + touchstartY);
        scrolledLeft = scrollEndLeft + touchendX - (scrollStartLeft + touchstartX);

        switch (direction) {
            case 'left':
                // <<
                return checkLeft(callback, args);
            case 'right':
                // >>
                return checkRight(callback, args);
            case 'top':
                // ^
                return checkTop(callback, args);
            case 'bottom':
                // v
                return checkBottom(callback, args);
            default:
                break;
        }
    }

    function checkLeft(callback, args) {
        if (scrollEndLeft + touchendX + SWIPE_MIN < scrollStartLeft + touchstartX && -SWIPE_OPPOSITE_MAX < scrolledTop && scrolledTop < SWIPE_OPPOSITE_MAX) {

            console.log('px swipped left:', scrollStartLeft + touchstartX - (scrollEndLeft + touchendX + SWIPE_MIN));

            if (callback) {
                return callback(args);
            }
        }

        return false;
    }

    function checkRight(callback, args) {
        if (scrollStartLeft + touchstartX + SWIPE_MIN < scrollEndLeft + touchendX && -SWIPE_OPPOSITE_MAX < scrolledTop && scrolledTop < SWIPE_OPPOSITE_MAX) {

            console.log('px swipped right:', scrollStartLeft + touchstartX + SWIPE_MIN - (scrollEndLeft + touchendX));

            if (callback) {
                return callback(args);
            }
        }
        return false;
    }

    function checkTop(callback, args) {
        if (scrollEndTop + touchendY + SWIPE_MIN < scrollStartTop + touchstartY && -SWIPE_OPPOSITE_MAX < scrolledLeft && scrolledLeft < SWIPE_OPPOSITE_MAX) {
            console.log('px swipped down:', scrollEndTop + touchendY + SWIPE_MIN - (scrollStartTop + touchstartY));

            if (callback) {
                return callback(args);
            }
        }
        return false;
    }

    function checkBottom(callback, args) {
        if (scrollStartTop + touchstartY + SWIPE_MIN < scrollEndTop + touchendY && -SWIPE_OPPOSITE_MAX < scrolledLeft && scrolledLeft < SWIPE_OPPOSITE_MAX) {

            console.log('px swipped top:', scrollStartTop + touchstartY + SWIPE_MIN - (scrollEndTop + touchendY));

            if (callback) {
                return callback(args);
            }
        }
        return false;
    }

    return { right: right, left: left, top: top, down: down };
}();

/* global
    TalkChat: false,
    baffle: false,
    Util: false,
*/
/* exported Nav */

var Nav = function () {
    var mainSections = TalkChat.mainSections,
        isNavReady = false,
        $heyThereIntro,
        $nav,
        $navItems,
        baffle0,
        baffle1,
        baffle2;

    $(document).ready(navInit);

    function navInit() {
        $heyThereIntro = $('.heyThere-intro');
        $nav = $('.js-Nav');
        $navItems = $('.js-NavItem');

        setTimeout(function () {
            showNav();
        }, 1500);
    }

    function showNav() {
        console.log('showNav()');
        // Bug on iphone6 returns 0.9999989867210388 instead of 1.
        if ($heyThereIntro.css('opacity') >= '0.9') {
            startBaffle();

            $nav.removeClass('is-loading');
            $navItems.addClass('is-active');

            setTimeout(function () {
                isNavReady = true; // to trigger _hashs.js if needed
            }, 1000);
        } else {
            setTimeout(function () {
                return showNav();
            }, 300);
        }
    }

    function startBaffle() {
        baffle0 = baffle($navItems[0]), baffle1 = baffle($navItems[1]), baffle2 = baffle($navItems[2]);

        /* eslint-disable no-unused-vars */
        baffle0.start().text(function (currentText) {
            return mainSections[0];
        });
        baffle1.start().text(function (currentText) {
            return mainSections[1];
        });
        baffle2.start().text(function (currentText) {
            return mainSections[2];
        });
        /* eslint-enable no-unused-vars */

        baffle0.reveal(400, 450);
        baffle1.reveal(400, 250);
        baffle2.reveal(400, 300);
    }

    function checkIsNavReady() {
        return isNavReady;
    }

    return {
        checkIsNavReady: checkIsNavReady
    };
}();

/* global
    TalkChat:false,
    Util: false,
    Projects: false,
    Hashs: false,
*/
/* exported ChatApp */

var ChatApp = function () {
    var chatContent = TalkChat.conversation,
        $chatId = $('#chat'),
        chatPClass = '.chatPart-',
        botClass = chatPClass + 'bot',


    // crucial content from each part
    section,
        // string - section of the clicked button, ex: 'practice';
    $currentPart,
        // jquery - id of the clicked button parent chatPart ex: $('#chatpart-intro');
    id,
        // string - id of part ex: 'hobbies'
    title,
        // string - title of the new part ex: 'before that'
    sentence,
        // string - sentece shown on that part

    // some numbers to better control auto scroll and @medias
    // mediaQHeight = 550,
    wHeight,
        untilTablet;

    function clickOption($option) {
        // FIXME strange bug with safari isn't always right wHeight & untilTablet
        untilTablet = window.innerWidth < 750, section = $option.closest('.chatSection').attr('id'), $currentPart = $option.closest('.chatPart'), title = $option.attr('name'), id = Util.stringSlugLower(title);

        animateClickedOption($option);
        buildSentence($option);
    }

    function clickSection($section) {
        var $this = $($section);

        Hashs.set($this.text());

        // prevent buildSection twice
        if ($this.hasClass('is-selected') || $this.hasClass('js-botTrigger')) {
            $('#' + $this.data('section') + '-intro').find(chatPClass + 'title').focus();
            return true;
        }

        $this.addClass('is-selected').attr('aria-expanded', true);
        buildSection($this);

        $('.navCV').remove();
    }

    // ------ GENERAL STUFF ----- //
    // when the user clicks on a chat button, it runs away.
    function animateClickedOption($option) {
        var $optionParent = $option.parent();
        finishLoading($optionParent);
        setTimeout(function () {
            $optionParent.remove();
        }, 250);
    }

    function animateClickedOptionMob($option, $part) {
        console.log('animateClickedOptionMob() triggered');
        var $parent = $option.parent(),
            thisTop = $parent.offset().top,
            thisLeft = $parent.offset().left,
            $newTitle = $part.find(chatPClass + 'title'),
            otherTop = $newTitle.offset().top,
            otherLeft = $newTitle.offset().left,
            thisX = otherLeft - thisLeft,
            thisY = otherTop - thisTop;

        $parent.css({ 'transform': 'translate(' + thisX + 'px, ' + thisY + 'px)' });

        // FIXME - have timeout to stretch height (slideUp() with css) and remove();
        setTimeout(function () {
            $parent.addClass('remove');

            setTimeout(function () {
                if ($parent.siblings == 0) {
                    $parent.remove();
                } else if ($parent.siblings('.remove') == 1) {
                    $parent.remove();
                }
            }, 250);
        }, 500);
    }

    function bodyScrollTop(value) {
        $('body').animate({ scrollTop: value }, 1000, 'swing');
    }

    // ------ DOM STRUCTURE ELEMENTS ------ //
    function getElPart() {
        return $('<div class="chatPart" id="' + id + '">' + getElTitle(title) + getElSentence() + '</div>');
    }

    function getElTitle(title) {
        return '<div class="chatPart-human">' + ('<h3 class="chatPart-title jsLoading" tabindex="0">' + title + '</h3>') + '</div>';
    }
    function getElSentence() {
        return '<div class="chatPart-bot">' + ('<p class="chatPart-text jsLoading" aria-live="polite" aria-atomic="true">' + sentence + '</p>')
        // options
        + '</div>';
    }

    function getElBtn(text) {
        return '<div class="chatPart-option jsLoading">' + ('<button type="button" name="' + text + '" class="btnB jsLoading js-chatOpt" data-gaec="chat">' + text + '</button>') + '</div>';
    }

    function getOptions(section) {
        var objSection = chatContent[section],
            chatOptions = [],
            chatBtn,
            clicked; // prevent showing the same button twice.

        for (var key in objSection) {
            if (objSection.hasOwnProperty(key)) {

                if (!objSection['clicked']) {
                    objSection['clicked'] = [];
                }
                clicked = objSection['clicked'];

                // if key isn't on clicked && only first 2 keys found && key isn't clicked obj itself
                if (clicked.indexOf(key) < 0 && chatOptions.length < 2 && key !== 'clicked') {
                    chatBtn = getElBtn(key);
                    chatOptions.push(chatBtn);
                    objSection['clicked'].push(key);
                }

                if (chatOptions.length == 2) {
                    break;
                }
            }
        }

        return chatOptions;
    }

    // ------ SHOWING A PART COMPONENTS ------ //
    // 1. scrollSafe() - make sure newPart is 1/4 of the window height.
    function scrollSafe($currentPart) {
        if (!untilTablet) {
            var wScroll = $(window).scrollTop(),
                wHeight = window.innerHeight,
                pHeight = $currentPart.height(),
                pScroll = $currentPart.offset().top,
                tooClose = pScroll - wScroll + pHeight > wHeight / 2;

            // too close of above the fold || away from the view window
            if (tooClose || pScroll < wScroll) {
                bodyScrollTop(pScroll + pHeight - wHeight / 4);
            }
        }
    }

    function finishLoading($element) {
        $element.removeClass('jsLoading');
    }

    // ------ SHOWING A PART PROCESS - HEY TO TIMEOUTS! ------ //
    function showingCommon($part, diffPartCallBack, $option) {
        // var loadingTimeXtext = (section == "practice") ? 0 : $part.find(chatPClass+"human").text().length;
        $option = $option || null;

        // if is 1st part (begin of a section) guide on parent
        // otherwise guide on previous part (currentPart where the user clicked);
        $part.is(':first-child') ? scrollSafe($part.parent()) : scrollSafe($part.prev());

        $part.find(chatPClass + 'human').slideDown();

        if (untilTablet && $option) {
            animateClickedOptionMob($option, $part);
        }

        finishLoading($part.find(chatPClass + 'title'));
        $part.find(chatPClass + 'bot').slideDown();

        setTimeout(function () {
            diffPartCallBack($part, chatPClass);
        }, 500);

        // a11y purposes
        $part.find(chatPClass + 'title').focus();
    }

    function showingSentence($part) {
        var $sentence = $part.find(chatPClass + 'text');
        finishLoading($sentence);
        showingOptions($part);
    }

    function showingPractice($part) {
        finishLoading($part.find(chatPClass + 'text'));
        setTimeout(function () {
            Projects.startIt(section);
        }, 400);
    }

    function showingOptions($part) {
        // show 1st btn and then 2nd
        setTimeout(function () {
            finishLoading($part.find(chatPClass + 'option:first-of-type .js-chatOpt'));

            setTimeout(function () {
                // REVIEW better buttons target
                finishLoading($part.find(chatPClass + 'option:last-of-type .js-chatOpt'));

                // a11y purposes
                $part.find(chatPClass + 'text').focus();
            }, 300);
        }, 400);
    }

    // ------ TYPES OF PART BUILD ------ //
    // ------ section ------ //
    function buildSection($chatSection) {
        var $sectionIntro = '';
        title = $chatSection.text(), section = $chatSection.attr('data-section');

        sentence = chatContent[section]['intro'];
        delete chatContent[section]['intro'];

        $('<section/>', {
            'id': section,
            'class': 'chatSection jsLoading',
            'html': '<div class="chatPart" id="' + section + '-intro">' + getElTitle(title) + getElSentence() + '</div>'
        }).appendTo($chatId);

        $sectionIntro = $('#' + section + '-intro');

        if (section === 'practice') {
            showingCommon($sectionIntro, showingPractice);
        } else {
            $sectionIntro.find(botClass).append(getOptions(title));

            showingCommon($sectionIntro, showingSentence);
        }
    }

    // ------ talk ------ //
    function buildSentence($option) {
        // get text and remove it from chatContent.
        sentence = chatContent[section][title];
        delete chatContent[section][title];

        // build part
        var $ChatPart = getElPart(),
            $ChatOptions = getOptions(section);

        $ChatPart.find(botClass).append($ChatOptions);
        $currentPart.after($ChatPart);

        showingCommon($currentPart.next(), showingSentence, $option);
    }

    $(document).on('click', '.js-chatOpt', function () {
        clickOption($(this));
    });

    $(document).on('click', '.js-chatSection', function () {
        clickSection($(this));
    });

    return {
        scrollSafe: scrollSafe
    };
}();

/* global
    TalkChat:false,
    Util: false,
    Projects: false,
    Hashs: false,
    baffle: false,
    GAcustom: false,
    Swipped: false,
*/
/* exported Projects */

var Projects = function () {
    var activeClass = 'is-active',
        chatContent = TalkChat.conversation,
        arrProjects = chatContent.practice.projects,
        projLimit = 7,
        // min limit of projects on nav for each side
    initialProject = '',
        // start projects with a specific project

    classProjMedia = '.projCont-media',
        classProjSub = '.projCont-subtitle',
        classProjTitle = '.js-projCont-title',
        classProjLinks = '.projCont-links',
        classProjIntro = '.projCont-intro',
        classProjDetails = '.projCont-details',
        classProjRole = '.projCont-role',
        classProjDate = '.projCont-date',
        classProjTeam = '.projCont-team',
        classProjBotTip = '.bot-nav',
        classPivot = '.projNav-pivot',


    // -left and -right are needed to smooth nav transitions when a new button is added.
    classProjLeft = '.projNav-left',
        classProjRight = '.projNav-right',
        untilTablet = Util.untilTablet,
        direction,
        $pivot,
        $projsLeft,
        $projsRight,
        $projActive,
        // nav variables
    projData,
        $projTitle,
        $projMedia,
        $projTeam,
        $projLinks,
        $projBotTip,
        // getProjDomElements variables
    $newActive,
        fPos,
        $projDir,
        addProjNumb,
        isParentLeft,
        // moveNavTo variables
    estimateFinalWidth,
        projActiveWidth,
        pivotX,
        projActiveX,
        transX,
        // alignPivot variables
    baffleSub,
        baffleIntro,
        baffleRole,
        baffleDate,
        baffleDetails,
        // baffle variables

    windowBotWidth = window.innerWidth * 40 / 100,
        numbOfGestures = 0,
        projectsVisible = false,
        // prevent use of keyboard < > before opening projects
    gael = ''; // used to GA


    // ------ build nav and project DOM ------ //
    function buildProj() {
        var elNav = buildNav();
        var elNavHidden = buildNav(true);

        return $('<div class="proj" id="projects">' + '<div class="bot-nav" aria-hidden="true"></div>' + '<div class="projNav">' + '<div class="projNav-pivot">' + '<nav class="projNav-left" aria-labelledby="a11y-projNav">'
        // W3C will not say "Untitled Nav" and at the same time Screen Readers will read correctly Nav without reading the h4 ;)
        + '<h4 id="a11y-projNav" class="sr-only" aria-hidden="true">Projects in a carousel</h4>' + elNav + '</nav>' + ('<div class="projNav-right" aria-hidden="true">' + elNavHidden + '</div>') + '</div>' + '</div>' + '<article id="a11y-projCont" class="projCont">' + '<h4 class="sr-only js-projCont-title" aria-live="polite" aria-atomic="true" tabindex="0"> </h4>' + '<div class="projCont-left">' + '<div class="projCont-media" aria-hidden="true">' + '<div class="Glidder"> </div>' + '</div>' + '</div>' + '<div class="projCont-right">' + '<div class="projCont-links"></div>' + '<div class="projCont-descript">' + '<h5 class="projCont-intro"> </h5>' + '<p class="projCont-details"> </p>' + '</div>' + '<div class="projCont-about">' + '<p class="projCont-role"> </p>' + '<p class="projCont-date"> </p>' + '<p class="projCont-team"> </p>' + '</div>' + '</div>' + '</div>' + '</div>');
    }

    function buildNav(ariaHidden) {
        var elProjNav = '',
            projName,
            nameSlug;

        for (var i = 0, l = arrProjects.length; i < l; i++) {
            projName = arrProjects[i];
            nameSlug = Util.stringSlugLower(projName);
            elProjNav += getElBtn(nameSlug, projName, ariaHidden);
        }

        return elProjNav;
    }

    function addProjNav(numberOfProj) {
        var navProjects = '',
            nameSlug,
            projName = '',
            projLastIndex = arrProjects.length - 1,
            projI = isParentLeft ? arrProjects.indexOf($projsLeft.children(':first').text()) - 1 : arrProjects.indexOf($projsRight.children(':last').text()) + 1;

        if (isParentLeft) {
            for (var i = 0; i < numberOfProj; i++) {
                if (arrProjects[projI]) {
                    projName = arrProjects[projI];
                } else {
                    projI = projLastIndex;
                    projName = arrProjects[projI];
                }
                nameSlug = Util.stringSlugLower(projName);
                navProjects = getElBtn(nameSlug, projName, true) + navProjects; // reverse order
                projI--;
            }

            $projsLeft.prepend(navProjects);
        } else {
            for (var _i = 0; _i < numberOfProj; _i++) {
                if (arrProjects[projI]) {
                    projName = arrProjects[projI];
                } else {
                    projI = 0;
                    projName = arrProjects[projI];
                }
                nameSlug = Util.stringSlugLower(projName);
                navProjects += getElBtn(nameSlug, projName, true);
                projI++;
            }

            $projsRight.append(navProjects);
        }
    }

    function getElBtn(nameSlug, projName, ariaHidden) {
        if (ariaHidden) {
            return '<button type="button" name="' + nameSlug + '" class="projNav-btn" data-gaec="projNavClick" aria-hidden="true" tabindex="-1">' + projName + '</button>';
        }
        return '<button type="button" name="' + nameSlug + '" class="projNav-btn" data-gaec="projNavClick" aria-expanded="false" aria-controls="a11y-projCont">' + projName + '</button>';
    }

    // ------ get project content ------ //
    function getProjDomElements() {
        // get all the projects placeholders once they are on the DOM
        $projsLeft = $(classProjLeft);
        $projsRight = $(classProjRight);
        $pivot = $(classPivot);
        $projBotTip = $(classProjBotTip);

        $projTitle = $(classProjTitle);
        $projMedia = $(classProjMedia);
        $projTeam = $(classProjTeam);
        $projLinks = $(classProjLinks);
    }

    function getImages(imgArray) {
        var elImgs = '',
            newImg,
            imgRet,
            screenM = window.innerWidth >= 650,
            screenL = window.innerWidth >= 1250,
            isRetina = Util.isRetina;


        if (screenL) {
            elImgs = fetchRes('@3x');
        } else if (screenM) {
            elImgs = isRetina ? fetchRes('@3x') : fetchRes('@2x');
        } else {
            elImgs = isRetina ? fetchRes('@2x') : fetchRes();
        }

        return $('<div/>', { 'class': 'Glidder' }).html(elImgs);

        function fetchRes(res) {
            if (res) {
                for (var i = 0, arr = imgArray.length; i < arr; i++) {
                    imgRet = imgArray[i].split('.');
                    imgRet.splice(1, 0, res);
                    imgRet.splice(2, 0, '.');
                    newImg = imgRet.join('');
                    elImgs += '<img src="' + newImg + '">';
                }
            } else {
                for (var _i2 = 0, _arr = imgArray.length; _i2 < _arr; _i2++) {
                    elImgs += '<img src="' + imgArray[_i2] + '">';
                }
            }

            return elImgs;
        }
    }

    function getProjectLinks(links) {
        var elLinks = '';
        for (var i = 0, l = links.length; i < l; i++) {
            elLinks += '<div class="projCont-links-option">' + ('<a href="' + links[i][0] + '" target="_blank" class="btnCheck">') + links[i][1] + '</a>' + '</div>';
        }
        return elLinks;
    }

    function revealProject(projName) {
        projData = chatContent.practice[projName];

        $projTitle.text(projName);
        $projTitle.focus();
        $projMedia.html(getImages(projData.img));
        $projLinks.html(getProjectLinks(projData.links));
        $projTeam.html(projData.team);

        baffleSub.reveal(400, 150);
        baffleIntro.reveal(400, 0);
        baffleRole.reveal(400, 70);
        baffleDate.reveal(400, 250);
        baffleDetails.reveal(400, 300);

        /* eslint-disable no-unused-vars */
        baffleSub.text(function (currentText) {
            return projData.sub;
        });
        baffleIntro.text(function (currentText) {
            return projData.capt;
        });
        baffleRole.text(function (currentText) {
            return projData.role;
        });
        baffleDate.text(function (currentText) {
            return projData.date;
        });
        baffleDetails.text(function (currentText) {
            return projData.more;
        });
        /* eslint-enable no-unused-vars */

        $('img').on('error', function () {
            $(this).remove();
        });

        setTimeout(function () {
            imgParallax();
        }, 250);
    }

    function imgParallax() {
        var windowH = window.innerHeight;
        var safeMargin = 36;

        var elementOffset = $projMedia.offset().top,
            scrollTop = void 0,
            distanceFromTopScreen = void 0,
            distanceInPercentage = void 0,
            translateY = void 0;

        $(document).scroll(function () {
            scrollTop = $(window).scrollTop();
            distanceFromTopScreen = elementOffset - scrollTop;
            distanceInPercentage = 100 - distanceFromTopScreen * 100 / windowH;

            translateY = ((distanceInPercentage * safeMargin / 100 * -1 + 10) / 1.5).toFixed(2);

            if (translateY < 0) {
                if (!untilTablet) {
                    // its faster to apply the transform on each image than its parent because images have animations
                    $projMedia.find('img').each(function () {
                        $(this)[0].style.transform = 'translateY(' + translateY + '%)';
                    });
                }
            }
        });
    }

    // ------ deal with nav behavior ------ //

    function updateVarsOnNav(condition) {
        if (condition) {
            $projDir = $projsLeft;
            fPos = 'last';
        } else {
            $projDir = $projsRight;
            fPos = 'first';
        }

        // check how many projects should be added to the nav
        addProjNumb = isParentLeft ? projLimit - $projActive.prevAll().length : projLimit - $projActive.nextAll().length;
    }

    function alignPivot($newProject) {
        $newProject = $newProject || $projActive;
        pivotX = $pivot.offset().left;
        projActiveX = $newProject.offset().left;

        if (estimateFinalWidth) {
            projActiveWidth = direction == 'right' ? $newProject.outerWidth() * 0.49 : $newProject.outerWidth() * 1.49;
        } else {
            projActiveWidth = $newProject.outerWidth();
        }

        transX = untilTablet ? 24 + pivotX - projActiveX : windowBotWidth + pivotX - projActiveX - projActiveWidth; // pixel perfect

        $pivot[0].style.transform = 'translateX(' + transX + 'px)';
        console.log('pivot aligned');
    }

    function showNewProject() {
        var newActiveText = $newActive.text();

        baffleProj();
        revealProject(newActiveText);

        Hashs.set(newActiveText);

        $projActive.removeClass(activeClass).attr('aria-expanded', false);

        if (addProjNumb > 0) {
            addProjNav(addProjNumb);
        }

        // give ~ time to CSS transition ends
        setTimeout(function () {
            // calculate ~ final width before it happens - might not be the best solution, but it's the best i could do.
            estimateFinalWidth = !isParentLeft || untilTablet;

            $newActive.addClass(activeClass).attr('aria-expanded', true);
            $projActive = $newActive;

            alignPivot();

            // align Pivot again to pixel perfect
            if (estimateFinalWidth) {
                setTimeout(function () {
                    estimateFinalWidth = false;
                    alignPivot();
                }, 150);
            }
        }, 150);
    }

    // ------ util functions ------ //

    function changeBotNavText(text) {
        $projBotTip.addClass('.jsLoading');
        setTimeout(function () {
            $projBotTip.html(text);
        }, 150);
        setTimeout(function () {
            $projBotTip.removeClass('.jsLoading');
        }, 300);
    }

    function checkIsParentLeft() {
        return $newActive.closest('.projNav-left').length == 1;
    }

    function baffleProj() {
        baffleSub = baffle(classProjSub), baffleIntro = baffle(classProjIntro), baffleRole = baffle(classProjRole), baffleDate = baffle(classProjDate), baffleDetails = baffle(classProjDetails);

        baffleSub.start();
        baffleIntro.start();
        baffleRole.start();
        baffleDate.start();
        baffleDetails.start();
    }

    // ------ Public ------ //

    function setInitialProject(project) {
        if (typeof project === 'string') {
            return initialProject = project;
        }
        return false;
    }

    function startIt(section) {
        var elProj = buildProj(),
            projName = initialProject || arrProjects[Util.randomNumb(arrProjects.length - 1) + 1];

        $('#' + section).append(elProj);
        $('#projects').slideDown();
        listenForSwipes();
        getProjDomElements();
        baffleProj();

        setTimeout(function () {
            var projNameSlugged = Util.stringSlugLower(projName);
            revealProject(projName);

            $projActive = $('.projNav-btn[name=\'' + projNameSlugged + '\']').first();

            $projActive.addClass(activeClass).attr('aria-expanded', true);

            alignPivot();

            setTimeout(function () {
                return alignPivot();
            }, 150); // align Pivot again to pixel perfect
        }, 400);

        initialProject = false;
        projectsVisible = true;
        $('.js-cvUnder').remove(); // remove projects from CV section
    }

    function onNavProjClick($btn) {
        $newActive = $btn;

        // FIXME | BUG - if the current btn and new btn are not in the same parent, it's a false true
        direction = $newActive.prevAll($projActive).length ? 'right' : 'left';

        if (numbOfGestures === 0) {
            Util.hasTouchEvents ? changeBotNavText(chatContent.behaviour.navProjMob) : changeBotNavText(chatContent.behaviour.navProjDesk);
        }

        updateVarsOnNav(checkIsParentLeft());
        showNewProject();
    }

    function moveNavTo(direction) {
        console.log('moveNavTo()', direction);

        if (direction === 'left') {
            $newActive = $projActive.prev();
        } else if (direction === 'right') {
            $newActive = $projActive.next();
        } else {
            return false;
        }

        isParentLeft = checkIsParentLeft();

        updateVarsOnNav(direction == 'left');

        if ($newActive.length == 0) {
            $newActive = $projDir.children(':' + fPos);
        }

        showNewProject();

        switch (numbOfGestures) {
            case 2:
                changeBotNavText("that's it. you're a natural");
                break;
            case 20:
                changeBotNavText("you love loops don't you?");
                break;
            case 40:
                changeBotNavText("my head's spinning.");
                break;
            case 80:
                changeBotNavText('you got the idea.');
                break;
            case 120:
                changeBotNavText('._.');
                break;
            case 200:
                changeBotNavText('such a kid ¯\\_(ツ)_/¯');
                break;
            default:
                changeBotNavText('');
                break;
        }

        numbOfGestures++;

        (function toGA() {
            var ec = 'projNavMoved';
            var inm = $newActive.text().replace(/[^a-zA-Z]/g, '');
            var ea = inm; // action
            gael += inm + '|';

            GAcustom.sendToGA('&ec=' + ec + '&in=' + inm + '&ea=' + ea + '&el=' + gael);
        })();
    }

    // ------ DOM Interactions ------ //
    function listenForSwipes() {
        if (Util.hasTouchEvents) {
            var elProjects = document.getElementById('projects');

            console.log(elProjects);

            Swipped.right(elProjects, moveNavTo, 'left');
            Swipped.left(elProjects, moveNavTo, 'right');
        }
    }

    $(document).keydown(function (e) {
        if (projectsVisible) {
            if (e.keyCode == 37) {
                // [ < ]
                moveNavTo('left');
            } else if (e.keyCode == 39) {
                // [ > ]
                moveNavTo('right');
            }
        }
    });

    $(document).on('click', '.projNav-btn', function (e) {
        e.stopPropagation(); // prevent scroll to top

        if ($(this).hasClass(activeClass)) {
            $projTitle.focus();
            return true;
        }
        onNavProjClick($(this));
    });

    return {
        setInitialProject: setInitialProject,
        startIt: startIt,
        onNavProjClick: onNavProjClick,
        moveNavTo: moveNavTo
    };
}();

var cvProjects = function () {
    var $cvProjUl,
        $cvProjects,
        $sub,
        ArrProj,
        projI = 0,
        iR,
        keepLooping = false,
        // triggered _onweb.js
    $child; // var on hightlightProject();


    function hightlightProject(child) {

        if (keepLooping) {
            // active next project and call itself with next child index,
            $child = $(child);
            removeActive();
            $child.addClass('active');
            setNewSub($child.data('sub'));

            setTimeout(function () {
                iR = Util.randomNumb(ArrProj);
                hightlightProject(ArrProj[iR]);
            }, 2500);
        } else {
            // otherwise call () itself again in 1000ms;
            setTimeout(function () {
                return hightlightProject(child);
            }, 1000);
        }
    }

    function removeActive() {
        $cvProjects.removeClass('active');
    }

    function setNewSub(text) {
        $sub.html('<span>' + text + '<span>');
    }

    $(function cvProjects() {
        (function updateVars() {
            $cvProjUl = $('.js-cvProj');
            $cvProjects = $cvProjUl.find('.cv-link');
            $sub = $('.js-cvProjSub');
            ArrProj = $cvProjects.toArray();
        })();

        hightlightProject(ArrProj[projI]);

        $cvProjects.on('mouseenter focus', function () {
            removeActive();
            setNewSub($(this).data('sub'));
            setProjLoop(false);
        }).on('mouseleave', function () {
            setProjLoop(true);
        });

        $cvProjects.on('click', function (e) {
            e.preventDefault(); // whoever doesn't have js, at least go to the original page
            Projects.setInitialProject($(this).text());
            $('.js-NavItem[data-section="practice"]').trigger('click');
        });
    });

    // ------ publicCmd  ------ //
    function setProjLoop() {
        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        keepLooping = status;
    }

    return {
        setProjLoop: setProjLoop
    };
}();

var botSection = function () {
    var botContent = TalkBot.conversation,
        triggerActive = 'jsLoading',
        botInputId = "botInput",
        botAnswerClass = "bot-answer",
        botSentClass = "bot-sent",
        jsSentEmptyClass = "js-sentEmpty",
        $bot = $('#bot'),
        $botTerminal,
        $botInner,
        $botText,
        setAutoScroll = true,
        firstTrigger = true,
        originalSent,
        sentText,
        //text written on input
    context; //input context of the conversation


    function appendSent() {
        var directInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        var sentEmpty = "";
        originalSent = directInput || originalSent;
        if (originalSent == "") sentEmpty = jsSentEmptyClass;
        $botText.append("<p class='" + botSentClass + " " + sentEmpty + "'>" + originalSent + "</p>");
        setAutoScroll = true;
        startAutoScroll();
    }

    function buildBot() {
        var $elBot = $('<div class="bot-header">\n                        <span class="bot-hl js-bot-user">:: /008080 - as superuser @ /*ip*/</span>\n                        <button name="close" type="button" class="btnBot bot-hr jsLoading" data-bot="exit">[Close]</button>\n                        <button name="help" type="button" class="btnBot bot-hr jsLoading" data-bot="help">[Help]</button>\n                        <button name="more" type="button" class="btnBot bot-hr jsLoading" data-bot="more">[More]</button>\n                    </div>\n                    <div class="bot-terminal"><div class="bot-text"></div></div>\n                    <div class="bot-footer">\n                        <input type="text" name="talk-to-bot" class="bot-input jsLoading" id="botInput" maxlength="20"></input>\n                    </div>');

        $bot.append($elBot);
        getIp();
        $botInner = $('#bot').find('.bot-inner'), $botText = $bot.find('.bot-text');
        $botTerminal = $('.bot-terminal');
    }

    function getBotAnswer() {
        var objContext = botContent[context];
        var botAnswer = [];

        switch (context) {
            case 'options':
                botAnswer = objContext[objSearchSubKeys(objContext)] || objContext['google it'];
                appendBotAnswer(botAnswer);
                break;
            case 'commands':
                //if sent Empty, check if it's to continue previous command or go to .EmpTy.
                if (sentText == "") {
                    var lastSection = $botText.find('.bot-sent').not('.' + jsSentEmptyClass).last().text();
                    if (objContext.keepSection[1].indexOf(lastSection) > -1) {
                        sentText = lastSection;
                    } else {
                        var iR = Util.randomNumb(botContent.EmpTy);
                        appendBotAnswer(botContent.EmpTy[iR]);
                        return;
                    }
                }

                var key = objSearchSubKeys(objContext);
                if (key) {
                    var contextLength = objContext[key].length;
                    if (contextLength) {
                        var iR = Util.randomNumb(contextLength);
                        botAnswer = objContext[key][iR];
                        objContext[key].splice([iR], 1); //prevent for showing the same thing twice.
                    } else {
                        objContext.allSaid[0][0] = replaceSentText(objContext.allSaid[0][0]);
                        botAnswer = objContext.allSaid[0];
                        var iSection = objContext.keepSection[1].indexOf(sentText);
                        objContext.keepSection[1].splice(iSection, 1); //prevent for showing the same thing again;
                    }
                    appendBotAnswer(botAnswer, objContext);
                } else {
                    searchVocabulary();
                }
                break;
            default:
                talkToBot('tilttt', 'commands');
                GAcustom.sendToGA('&ec=bug&ea=tilttt');
        }
    }

    function searchVocabulary(context) {
        if (sentText == "") {
            var botAnswer = botContent.EmpTy[Util.randomNumb(botContent.EmpTy)];
        } else {
            context = context || "vocabulary";
            var objContext = botContent[context];
            var botAnswer = objContext[objSearchSubKeys(objContext)] || botContent.LosT;
        }
        appendBotAnswer(botAnswer);
    }

    function appendBotAnswer(answer, objContext) {
        $botText.append("<span class='jsBotThinking'></span>"); //BUG review this please

        $('.jsBotThinking').remove();

        if (typeof answer == "string") {
            setTimeout(function () {
                $botText.append("<p class='" + botAnswerClass + "'></p>").find('p:last-of-type').typed({
                    strings: answer,
                    contentType: 'html',
                    typeSpeed: -450,
                    startDelay: 0,
                    callback: function callback() {
                        afterAppendBotAnswer(answer, objContext);
                    }
                });
            }, answer.length * 1.33);
        } else {
            setTimeout(function () {
                $botText.append("<p class='" + botAnswerClass + "'></p>").find('p:last-of-type').typed({
                    strings: [answer[0]],
                    contentType: 'html',
                    typeSpeed: -450,
                    startDelay: 0,
                    callback: function callback() {
                        afterAppendBotAnswer(answer, objContext);
                    }
                });
            }, answer[0].length * 1.33);
        }
    }

    function afterAppendBotAnswer(answer, objContext) {

        if (typeof answer == "string") {
            showInput();
        } else if (Array.isArray(answer)) {
            switch (answer.length) {
                case 1:
                    showInput();
                    break;
                case 2:
                    showInput(answer[1]);
                    break;
                default:
                    showInput(answer[1], answer[2]);
            }

            //check if it has to show keepStion placeholder
            if (objContext != undefined //if context exists
            && objContext.keepSection[1].indexOf(sentText) > -1 // it's a section with more stuff (array)
            && objContext[sentText].length > 0) {
                // it still has stuff to show
                objContext.keepSection[0] = replaceSentText(objContext.keepSection[0]);
                showInput(objContext.keepSection[0], answer[2]);
                return true;
            }
        } else {
            console.log("ERROR . verify this line @error2");
        }
    }

    function replaceSentText(string) {
        return string.replace("[*param*]", sentText);
    }

    // ----- Util Functs ----- //

    // look for possible inputs in the context
    function objSearchSubKeys(objContext) {
        for (var key in objContext) {
            if (objContext.hasOwnProperty(key)) {
                var subKeys = key.split(/,\s?/);
                if (subKeys.indexOf(sentText) > -1) {
                    return key;
                }
            }
        }
    }

    // activate input again
    function showInput() {
        var placeholder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '>_';
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'commands';


        $('#' + botInputId).attr({ name: name, placeholder: placeholder }).removeClass('jsLoading').prop('disabled', false).focus();

        // $('.typed-cursor').remove(); //NOTE i think this doesn't do nothing. | | blink |


        $('.bot-terminal').animate({
            scrollTop: $('.bot-text').prop('scrollHeight')
        }, 0);

        setAutoScroll = false;
    }

    function getIp() {
        $.get("https://ipinfo.io", function (response) {
            console.log(response.ip);
            var $botUser = $('.js-bot-user'),
                newTxt = $botUser.text().replace('/*ip*/', response.ip);
            $botUser.text(newTxt);
        }, "jsonp");
    }

    function startAutoScroll() {
        if (setAutoScroll) {
            setTimeout(function () {
                $botTerminal.animate({
                    scrollTop: $('.bot-text').prop('scrollHeight')
                }, 0);
                startAutoScroll();
            }, 300);
        }
    }
    // ----- publicCmd ----- //
    var gael = "";

    function talkToBot(directText) {
        var directContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        originalSent = directText || $('#' + botInputId).val();
        sentText = originalSent; //prevent funny users to struggle with this function;

        //prevent funny users to struggle with this function
        if (typeof sentText !== "string") {
            console.log('tillt typeof');
            sentText = "tilttt";
            directContext = "commands";
        }

        sentText = sentText.replace(/[^a-zA-Z ]/g, "").toLowerCase();
        context = directContext || $('#' + botInputId).attr('name') || 'commands';

        $('#' + botInputId).addClass('jsLoading').val('').prop('disabled', true);

        appendSent();
        getBotAnswer();

        (function toGA() {
            var ec = 'bot',
                ea = sentText.replace(/[^a-zA-Z ]/g, ""); //action

            gael += ea + "|"; //save all path clicks to know the jorney

            GAcustom.sendToGA('&ec=' + ec + '&ea=' + ea + '&el=' + gael);
        })();
    }

    function toggleBot() {
        $bot.toggleClass(triggerActive);
        cvProjects.setProjLoop(false);
    }

    // ------ DOM Interactions ------ //

    // showing 008080 section
    $(document).on('click', '.js-botTrigger', function () {

        if (!firstTrigger) {
            toggleBot();
            talkToBot('welcome back');
        } else {
            cvProjects.setProjLoop(false);
            buildBot();
            $bot.removeClass(triggerActive);
            setTimeout(function () {
                return appendBotAnswer(botContent.intro);
            }, 500);
            setTimeout(function () {
                $('.bot-header').find('button').removeClass(triggerActive);
            }, 3000);
            firstTrigger = false;
        }
    });

    var tooLongWarn = true,
        inputVal;

    // press ENTER key to send what's on input
    $(document).on('keyup', '#' + botInputId, function (e) {
        var inputVal = this.value;

        switch (inputVal.length) {
            case 20:
                if (tooLongWarn) {
                    appendSent(botContent.poet);
                    GAcustom.sendToGA('&ec=chatMax&ea=' + inputVal);
                    tooLongWarn = false;
                }
                break;
            case 10:
                tooLongWarn = true;
                break;
            default:

        }

        if (e.keyCode == 13) {
            //ENTER
            talkToBot();
        }
    });

    //close 008080 section with ESC key
    $(document).keyup(function (e) {
        if (e.keyCode == 27) {
            // ESC
            $bot.addClass(triggerActive);
        }
    });

    $(document).on('click', '.btnBot', function () {
        talkToBot($(this).data('bot'));
    });

    return {
        talkToBot: talkToBot,
        toggleBot: toggleBot
    };
}();

/* global TalkChat:false, baffle:false, cvProjects: false, Util:false, myselfASCII:false */
/* exported currentText */
/* global currentText */

var onCV = function () {
    var $onWebLink,
        chatContent = TalkChat.conversation,
        contOnWeb = chatContent.onWeb,
        intro = contOnWeb.intro,
        dd = contOnWeb.dd,
        baffleWebSite,
        baffleWebDd;

    function asciiMotion() {
        var firstScroll = true,
            scrolled,
            $ascii = $('.cv-ascii');

        $ascii.append(myselfASCII);

        var $mee = $('.cv-ascii').find('.mee');
        $mee.css('display', 'block');

        var $meeLength = $mee.length,
            asciiOffsetTop,
            asciiOffsetTopWithHeight;

        $(window).on('scroll', function () {
            scrolled = $(window).scrollTop();

            if (firstScroll) {
                asciiOffsetTop = $ascii.offset().top;
                asciiOffsetTopWithHeight = asciiOffsetTop + $mee.innerHeight();
                firstScroll = false;
            }

            if (!Util.isOnViewport(asciiOffsetTop, asciiOffsetTopWithHeight, scrolled)) {
                return false;
            }

            if (!Util.untilTablet) {
                $ascii.css('transform', 'translateY(' + ((scrolled - asciiOffsetTopWithHeight) * 100 / window.innerHeight + 60) + '%)');
            }

            if (scrolled % 4 == 0) {
                $mee.css('opacity', 0);
                $('.myself' + scrolled % $meeLength).css('opacity', 1);
            }
        });
    }

    asciiMotion();

    function showContent() {
        // show Titles
        $('.js-cvShowTitle, .js-cvShow').each(function () {
            var $t = $(this),
                shut = false,
                windowHeight = window.innerHeight * 0.7,
                thisOffset = $t.offset().top;

            $t.addClass('is-js');

            $(document).scroll(function () {
                if ($(this).scrollTop() + windowHeight > thisOffset) {
                    if (!shut) {
                        $t.addClass('is-active');
                        shut = true;
                    }
                }
            });
        });
    }

    function socialInteraction() {
        $onWebLink = $('.js-onWeb-site').parent(), baffleWebSite = baffle('.js-onWeb-site'), baffleWebDd = baffle('.js-onWeb-dd');

        /* eslint-disable no-unused-vars */
        $(document).on('mouseenter focus', '.js-onWeb-link', function () {
            var _this = this;

            baffleWebSite.start().text(function (currentText) {
                return $(_this).data('site');
            }).reveal(150, 150);

            baffleWebDd.start().text(function (currentText) {
                return $(_this).data('dd');
            }).reveal(150, 150);

            $onWebLink.attr('href', $(this).attr('href')).attr('target', '_blank');
        }).on('mouseleave blur', '.js-onWeb-link', function () {
            baffleWebSite.start().text(function (currentText) {
                return intro;
            }).reveal(150, 150);

            baffleWebDd.start().text(function (currentText) {
                return dd;
            }).reveal(150, 150);
            $onWebLink.removeAttr('href');
        });
        /* eslint-enable no-unused-vars */
    }

    return {
        socialInteraction: socialInteraction,
        showContent: showContent
    };
}();

$(function lookIntoOnWww() {
    var $cv = $('#cv'),
        offsetCv = $cv.offset().top,
        triggerOnWebInit = true;

    $(window).scroll(function () {
        if (triggerOnWebInit && $(window).scrollTop() + Util.wHeight - 45 > offsetCv) {
            triggerOnWebInit = false;

            $('.navCV').remove();
            cvProjects.setProjLoop(true);

            if (!Util.hasTouchEvents) {
                onCV.socialInteraction();
            }

            onCV.showContent();
        }
    });
});

var Psst = function () {
    var hasTouchEvents = Util.hasTouchEvents,
        chatContent = TalkChat.conversation;

    // change message only for touch mobile (no bot there)
    function showScrollify($jsPsst) {
        var $scrolled = $('.js-scrolled'),
            newMargin = 400,
            scrolledRecord = getStorage();

        $jsPsst.find('.psst-title').html(chatContent.behaviour.psstMob[0]);
        $jsPsst.find('.psst-parag').html(chatContent.behaviour.psstMob[1] + '<br><br>');
        $jsPsst.find('button').remove();

        getScrolledText();

        $(window).scroll(function () {
            getScrolledText();

            // increase document height to keep scrolling
            if ($(document).height() <= window.innerHeight + $(window).scrollTop()) {
                newMargin += 800;
                $('#cv').css({ 'margin-bottom': newMargin });
            }
        });

        function getScrolledText() {
            // check if it is a new record or not
            if ($(window).scrollTop() > scrolledRecord) {
                scrolledRecord = $(window).scrollTop();
                $scrolled.text(scrolledRecord);
            } else {
                $scrolled.text(Math.abs($(window).scrollTop() - scrolledRecord) + ' until new record');
            }
        }

        function getStorage() {
            try {
                // Safari BUG fixed: SecurityError: DOM Exception 18: An attempt was made to break through the security policy of the user agent.
                var storedRecord = localStorage.getItem('scrolledRecord');
                return !isNaN(storedRecord) ? storedRecord : 1;
            } catch (e) {
                return 1;
            }
        }

        (function setStorage() {
            localStorage.setItem('scrolledRecord', JSON.stringify(scrolledRecord));
            setTimeout(function () {
                return setStorage();
            }, 1000);
        })();
    }

    // change message on psstt when clicked on Projects
    function changePsst(context) {
        var $jsPsst = $('.js-psst');
        var psstText = chatContent.behaviour[context];

        if (!hasTouchEvents) {
            // trigger focus on bot
            $jsPsst.find('.psst-title').html(psstText[0]);
            $jsPsst.find('.psst-parag').html(psstText[1]);
            $jsPsst.find('button[name="true"]').remove();
            $jsPsst.find('button[name="false"]').html(psstText[2]);
        } else {
            // trigger scroll
            setTimeout(function () {
                showScrollify($jsPsst);
            }, 5000);
        }
    }

    $(function hideBotTrigger() {
        if (hasTouchEvents) {
            $('.js-botTrigger').removeClass('js-botTrigger').addClass('js-scrollify').text('not really');
        }
    });

    $(document).on('click', '.js-botProjects', function () {
        var $NavItemPractice = $('.js-chatSection[data-section="practice"]');
        $NavItemPractice.trigger('click'); // it will call Psst.changePsst().

        if (hasTouchEvents) {
            // FIXME: DRY here please... it's from _chat.js -> scrollSafe()
            var wScroll = $(window).scrollTop(),
                wHeight = window.innerHeight,
                pHeight = $NavItemPractice.height(),
                pScroll = $NavItemPractice.offset().top,
                tooClose = pScroll - wScroll + pHeight > wHeight / 2;

            // too close of above the fold || away from the view window
            if (tooClose || pScroll < wScroll) {
                $('body').animate({ scrollTop: pScroll + pHeight - wHeight / 4 * 1 }, 1000, 'swing');
            }
        }
    });

    $(document).on('click', '.js-scrollify', function () {
        showScrollify($('.js-psst'));
    });

    $(document).on('click', '.js-chatSection[data-section="practice"]', function () {
        Psst.changePsst('psstChat');
    });

    return {
        changePsst: changePsst
    };
}();

var Hashs = function () {
    var hash = window.location.hash.replace('#', '');

    if (hash) {
        $(function onDomReady() {

            // i know this has a lot of levels,
            // but this way I can reduce the number of loops by 6
            setTimeout(function () {

                (function watchingNav() {
                    if (Nav.checkIsNavReady()) {
                        console.log('ready');
                        triggerWhateverIsOn(hash);
                    } else {
                        console.log('nop');
                        setTimeout(function () {
                            return watchingNav();
                        }, 300);
                    }
                })();
            }, 3500); // ~ time needed on css to show all header
        });
    }

    function triggerWhateverIsOn(hash) {
        switch (hash) {
            case 'projects':
                $('.js-NavItem[data-section="practice"]').trigger('click');
                break;
            case 'journey':
                $('.js-NavItem[data-section="journey"]').trigger('click');
                break;
            default:
                lookIntoProjects(hash);
                break;
        }
    }

    function lookIntoProjects(hash) {

        // convert arrProjects to string, lowercase and array again.
        // and hash with spaces and lowercase to find a match on foundHashOnIndex

        var arrProjects = TalkChat.conversation.practice.projects,
            arrProjsLow = arrProjects.toLocaleString().toLowerCase().split(','),
            hashSpaces = hash.replace(/-/g, ' '),
            hashSpaceLow = hashSpaces.toLowerCase(),
            foundHashOnIndex = arrProjsLow.indexOf(hashSpaceLow);

        if (foundHashOnIndex > -1) {

            // if so, get the match Index and use it to target it on arrProjects.
            // this way we'r sure the correct project name (case sensitive) is passed to Projects();
            Projects.setInitialProject(arrProjects[foundHashOnIndex]);
            $('.js-NavItem[data-section="practice"]').trigger('click');
        } else {
            hash = hash.replace(/[^a-zA-Z ]/g, '');
            GAcustom.sendToGA('&ec=hash&ea=' + hash);
        }
    }

    function checkIfNavReady() {
        return ChatNav.isNavReady;
    }

    function set(newHash) {
        newHash = Util.stringSlugLower(newHash);
        console.log('new window location:', newHash);
        window.location.hash = newHash;
    }
    return {
        set: set
    };
}();

/* exported GAcustom */
var GAcustom = function () {
    var clickN = 0,
        cid,
        // client id
    ea,
        // action
    el = '',
        // label
    ec; // category


    function sendToGA(params) {
        clickN++; // ev = event value

        ga(function (tracker) {
            cid = tracker.get('clientId');
            console.log('ga_' + params);

            $.ajax({
                url: 'https://www.google-analytics.com/collect?v=1&t=event&tid=UA-70069700-3&cid=' + cid + params + '&ev=' + clickN,
                type: 'POST',
                cache: false,
                async: true,
                dataType: 'json'
            });
        });
    }

    // track all buttons
    $(document).on('click', 'button', function () {
        var $xthis = $(this);

        ec = $xthis.data('gaec') || 'btn forgotten';
        ea = $xthis.text().replace(/[^a-zA-Z ]/g, ''); // action
        el += ea + '|'; // label

        sendToGA('&ec=' + ec + '&ea=' + ea + '&el=' + el);
    });

    // track all links
    $(document).on('click', 'a', function () {
        var $xthis = $(this);

        ec = $xthis.data('gaec') || 'link forgotten';
        ea = $xthis.data('gaea') || $xthis.text().replace(/[^a-zA-Z ]/g, ''); // action
        el += ea + '|'; // label

        sendToGA('&cid=' + cid + '&ec=' + ec + '&ea=' + ea + '&el=' + el);
    });

    return {
        sendToGA: sendToGA
    };
}();