/* exported Util */

var Util = function () {

    var isiOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,
        untilTablet = isiOS ? screen.width < 750 : window.innerWidth < 750,
        wHeight = isiOS ? screen.height : window.innerHeight,
        // http://stackoverflow.com/questions/4629969/ios-return-bad-value-for-window-innerheight-width
    hasTouchEvents = false,
        isRetina = checkForRetina();

    // smooth anchor scroll
    $(document).on('click', 'a[href*=\\#]', function (e) {
        e.preventDefault();

        var HrefOffset = $($.attr(this, 'href')).offset();

        if (HrefOffset) {
            $('html, body').animate({
                scrollTop: HrefOffset.top - 100
            }, 1000);
        }
    });

    // detect if is a touch device
    document.addEventListener('touchstart', function onFirstTouch() {
        hasTouchEvents = true;
        document.removeEventListener('touchstart', onFirstTouch, false);
    }, false);

    function objSize(obj) {
        var size = 0,
            key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) size++;
        }
        return size;
    }

    function objRandom(obj) {
        var result,
            prop,
            count = 0;
        for (prop in obj) {
            if (Math.random() < 1 / ++count) result = prop;
        }
        return result;
    }

    function stringSlugLower(str) {
        return str.replace(/ /g, '-').toLowerCase();
    }

    function randomNumb(arr) {
        return Array.isArray(arr) ? Math.floor(Math.random() * arr.length) : Math.floor(Math.random() * arr);
    }

    function scrollTo(value) {
        $('body').animate({ scrollTop: value }, 1500, 'swing');
    }

    function checkForRetina() {
        var mediaQuery = '(-webkit-min-device-pixel-ratio: 1.5),\
                (min--moz-device-pixel-ratio: 1.5),\
                (-o-min-device-pixel-ratio: 3/2),\
                (min-resolution: 1.5dppx)';

        return window.devicePixelRatio > 1 || window.matchMedia && window.matchMedia(mediaQuery).matches;
    }

    return {
        hasTouchEvents: hasTouchEvents,
        isRetina: isRetina,
        objSize: objSize,
        objRandom: objRandom,
        randomNumb: randomNumb,
        scrollTo: scrollTo,
        stringSlugLower: stringSlugLower,
        untilTablet: untilTablet,
        wHeight: wHeight
    };
}();

$.fn.extend({
    toggleText: function toggleText(a, b) {
        $.trim(this.html()) == a ? this.html(b) : this.html(a);
    }
});

/* global TalkChat:false */
/* exported TalkChat */

var TalkChat = function () {
    var brk = '<br>',
        linkCodepen = '<a href=\'//codepen.com/sandrina-p\' class=\'link\' target=\'_blank\'>Codepen</a>',
        linkStackOverflow = '<a href=\'//stackoverflow.com/story/sandrina\' class=\'link\' target=\'_blank\'>Stackoverflow</a>',
        linkMariana = genLink('//marianarpdf.com', 'Mariana Freitas'),
        linkJoao = genLink('//www.facebook.com/joaocdvrodrigues', 'João Rodrigues'),
        linkMaggie = genLink('//mmbotelho.com', 'Margarida Botelho'),
        linkLusco = genLink('//www.facebook.com/luscooo', 'LUSCO'),
        mainSections = ['projects', 'journey', 'about'];

    function genLink(link, name) {
        return '<a href=\'' + link + '\' target=\'_blank\' class=\'linkProj\'>' + name + '</a>';
    }

    var conversation = {
        journey: {
            'intro': 'Right now she\'s loving to work as a <strong>UI Developer</strong> <span class="nowrap">at Farfetch.</span>' + brk + 'On her free time, she explores new ideas and techs that cross her feeds.',
            'ambition': 'She believes design is more than a interface and coding is not only about performance.' + brk + 'She seeks for a scenario where both can work as one to <strong>explore new possibilites.</strong>',
            'hobbies': '<span class="nowrap"><strong>Video Games</strong></span> are on of her choices. It\'s where <strong>experience is on its richer state</strong>: Interface, interaction and sound focused on <span class="nowrap">the user behavior.</span>',
            'what else': 'She likes <strong>open-source</strong> projects! She would love to hear your next crazy idea!',
            'workplace': 'She is a fast paced worker, so she likes to work alone.' + brk + 'Unless your ambitions are as high as hers, then it’s a match made in heaven.' + brk + 'From <strong>creative to technical, she can excel at any role.</strong>',
            'education': 'She has a degree in Design of Communication at FBAUL.' + brk + 'She also did a post-graduation on <strong>Digital Experience Design</strong> <span class="nowrap">at the same faculty.</span>'
        },
        practice: {
            intro: 'The constant searching for <strong>something unique and interactive</strong> is what connects her projects.',
            projects: ['rede expressos', 'carolina machado', 'portfolio 15', 'pistol shrimp', 'moon', 'N O X', 'DET', '141205'],
            'rede expressos': {
                categ: 'www projects',
                title: 'Rede Expressos',
                sub: 'web and app concept redesign',
                role: 'creative and front-end',
                team: 'Individual project',
                img: ['src/media/img/projects/rnex0.png', 'src/media/img/projects/rnex1.png', 'src/media/img/projects/rnex2.png', 'src/media/img/projects/rnex3.png'],
                capt: 'Everyone knows that Rede Expressos is not an user friendly platform...',
                more: 'As a final project for her post graduation she redesigned and coded the website\'s homepage and used Jekyll. UX / UI wise, she redesigned the "buy ticket" userflow for Mobile iOS and Android. The project had several phases: competitor Analysis, product SWOT, wireframes, design and prototype. She also learned how to adapt an app to follow both Human Guidelines and Material Design.',
                date: 'JUN\'16',
                links: [['https://marvelapp.com/6jef9dg', 'iOS prototype', 'apple'], ['https://sandrina-p.github.io/rede-expressos/', 'homepage', 'desktop']]
            },
            'carolina machado': {
                categ: 'www projects',
                title: 'Carolina Machado',
                sub: 'fashion website',
                role: 'Tumblr theme developer',
                team: 'Individual project',
                img: ['src/media/img/projects/cm0.png', 'src/media/img/projects/cm1.png', 'src/media/img/projects/cm2.png', 'src/media/img/projects/cm3.png'],
                capt: 'A Tumblr theme build from scratch. Ajax is the secret',
                more: 'After the first static website, she decided to give it an upgrade by adding some CMS to make the content dynamic and of course, easier for Carolina to update. Tumblr was the chosen one for its simple API and content management. With Ajax it was possible to have almost full control over it that now no one says it\'s a Tumblr.',
                date: 'mar\'16',
                links: [['//carolina-machado.com', 'check the website', 'desktop']]
            },
            'portfolio 15': {
                categ: 'www projects',
                title: 'Portfolio15',
                sub: 'her previous site',
                role: 'Creative and Programmer',
                team: 'Individual project',
                img: ['src/media/img/projects/sp0.png', 'src/media/img/projects/sp1.png', 'src/media/img/projects/sp2.png', 'src/media/img/projects/sp3.png'],
                capt: 'Say hello to my brother from 2015',
                more: 'She was looking for new interactive ways to present herself. I think the best part is the menu. You never saw something like that! She started to explore advanced CSS transitions and experimenting a lot of JS plugins. It\'s also an under construction website that she never finished. I don\'t think that\'s bad. In fact, that\'s the beauty about it!',
                date: 'AUG\'15',
                links: [['https://sandrina-p.github.io/portfolio-15/', 'check the website', 'desktop']]
            },
            'pistol shrimp': {
                categ: 'www projects',
                title: 'Pistol Shrimp',
                sub: 'net label website',
                role: 'Creative and Programmer',
                team: 'Made with ' + linkMariana + ', ' + linkJoao + ' and ' + linkMaggie,
                img: ['src/media/img/projects/ps0.png', 'src/media/img/projects/ps1.png', 'src/media/img/projects/ps2.png', 'src/media/img/projects/ps3.png'],
                capt: 'When you do all but what teachers asked, you end up with a crazy interactive project',
                more: 'Some friends of her wanted to build an online record label that distributes music for free. She wanted to work on a website. So they decided to go for it as a Final Degree project in Communication Design. The website presents itself with a black and white design by focusing on the user experience through each interactive release, enhancing the download, so there is more to it than just a click.',
                date: 'JUN\'15',
                links: [['https://sandrina-p.github.io/pistol-shrimp/', 'check the website', 'desktop']]
            },
            'moon': {
                categ: 'www projects',
                title: 'Moon',
                sub: 'Movie website',
                role: 'Creative and Programmer',
                team: 'Individual project',
                img: ['src/media/img/projects/moon0.png', 'src/media/img/projects/moon1.png', 'src/media/img/projects/moon2.png', 'src/media/img/projects/moon3.png'],
                capt: 'It\'s not a movie, but it could be',
                more: 'Hope you know the movie Moon (2009) by Duncan Jones. The main focus of this website was not about how the film was made but the story and experience that the character lives along the narration. Here, the user’s interaction is fundamental to create the website.',
                date: 'feb\'15',
                links: [['https://sandrina-p.github.io/moon/', 'check the website', 'desktop']]
            },
            'N O X': {
                categ: 'opening other doors',
                title: 'N O X',
                sub: 'video game concept',
                role: 'Motion Graphics',
                team: 'Made with ' + linkMaggie,
                img: ['src/media/img/projects/nox0.png', 'src/media/img/projects/nox1.png', 'src/media/img/projects/nox2.png', 'src/media/img/projects/nox3.png'],
                capt: 'This one is out of the text editor',
                more: 'She and her friend Margarida always loved video games. When given the chance, they took it and just did it. They didn\'t know anything about the design process behind it, but learned a lot trying to understand it. With Nyx (the greek goddess of night) in mind, they designed a video game trailer that focuses on darkness. Everything is illuminated only by the main characters fireflies. But I will not spoil you. Watch the video!',
                date: 'JUl\'16',
                links: [['https://vimeo.com/176452854', 'watch the video', 'vimeo']]
            },
            'DET': {
                categ: 'opening other doors',
                title: 'DET Dutch Experimental Typography',
                sub: 'Digital Magazine',
                role: 'Creative and Mag+',
                team: 'Made with ' + linkMaggie,
                img: ['src/media/img/projects/det0.png', 'src/media/img/projects/det1.png', 'src/media/img/projects/det2.png', 'src/media/img/projects/det3.png'],
                capt: '"I heard we can create digital magazines with inDesign!", "Oh really? Let\'s try it out!"',
                more: 'Because creating books it\'s not her thing, she and her friend Margarida decided to experiment a new digital world once again. They came up with "Dutch Experimental Typography\”, a digital catalogue of typography, developed from the 70’s throughout the 90’s in the Netherlands. I wish you could use it by yourself. It\'s really funny playing with its cover.',
                date: 'Mar\'15',
                links: [['https://www.behance.net/gallery/26687261/Digital-Magazine-Dutch-experimental-typography', 'check it on behance', 'behance']]
            },
            '141205': {
                categ: 'opening other doors',
                title: '141205',
                sub: '3D animation',
                role: 'Creative and technique',
                team: 'Sound by ' + linkLusco,
                img: ['src/media/img/projects/blend0.png', 'src/media/img/projects/blend1.png', 'src/media/img/projects/blend2.png', 'src/media/img/projects/blend3.png'],
                capt: 'Today is a video, tomorrow might be a website',
                more: 'Finally she had the opportunity to have 3D classes during her Erasmus in Porto. Although this video project is all about a single solid, she learned the essential about Blender features and 3D mechanisms to keep learning it by herself after Erasmus. She dreams for the day where her path crosses with ThreeJS and she can bring 3D to me!',
                date: 'DEC\'14',
                links: [['https://vimeo.com/115483647', 'check the video', 'vimeo']]
            }
        },
        onWeb: {
            intro: 'social networks',
            dd: 'not a big fan of facebook',
            social: {
                codepen: {
                    link: '//codepen.io/sandrina-p',
                    dd: 'because coding without fun is just boring'
                },
                github: {
                    link: '//github.com/sandrina-p',
                    dd: 'Sharing it\'s what make us better'
                },
                'stack-overflow': {
                    link: '//stackoverflow.com/story/sandrina',
                    dd: 'helping others is as important as being helped'
                },
                behance: {
                    link: '//www.behance.net/sandrin4p',
                    dd: 'it can\'t be all about code'
                }
            }
        },
        behaviour: {
            navProjMob: 'you can also <span>swipe</span> to the left or to the right',
            navProjDesk: 'you can also use your keyboard <span>[<]</span> and <span>[>]</span> keys',
            // returnFocus: "It seems her project kept you interested in this conversation. Go on, don't be shy.",
            // returnOnFly: "Hey there, where have you been?",
            psstChat: ['i\'m surprised', 'I\'m not allowed to share more info about her.' + brk + 'But by all means, don\'t be shy and go <a href=\'mailto:a.sandrina.p@gmail.com?subject=Hello!\' target=\'_blank\' class=\'link\'>say hello</a>.' + brk + 'She is very nice, specially if you are a good looking website like me.', 'Who are you?'],
            psstMob: ['Hmm...', 'You really like to scroll <span class=\'nowrap\'>don\'t you?</span>']
        }
    };

    return {
        mainSections: mainSections,
        conversation: conversation
    };
}();

var TalkBot = function () {

    function genLink(link, name) {
        var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "target='_blank'";

        return '<a href=\'' + link + '\' ' + target + ' class=\'linkBot\'>' + name + '</a>';
    }

    var googleIt = genLink('http://lmgtfy.com/?q=one+divided+by+zero', 'Google it'),
        linkKoala = genLink('//koala-app.com/', 'Koala'),
        linkGulp = genLink('http://gulpjs.com/', 'Gulp'),
        linkSUIT = genLink('https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md#ComponentName', 'SUIT methodology'),
        linkMP = genLink('http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html', 'Module Pattern'),
        linkLT = genLink('https://uxplanet.org/how-to-make-users-think-your-app-loads-faster-24052fe307bf#.330znvww7', 'perceived loading time'),
        linkFOUC = genLink('https://en.wikipedia.org/wiki/Flash_of_unstyled_content', 'FOUC'),
        linkGit = genLink('https://github.com/sandrina-p/s008080', 'Github'),
        linkHer = genLink('http://www.imdb.com/title/tt1798709/', "Her"),
        linkFirebase = genLink('http://firebase.google.com', 'Google Firebase'),
        linkHelpMe = genLink('https://github.com/sandrina-p/s008080/blob/master/src/data/_TalkBot-vocabulary.js', 'help me'),
        linkCodeAvatar = genLink('https://codepen.io/sandrina-p/pen/XNrVZj', 'codepen'),
        linkCodeGlidder = genLink('https://codepen.io/sandrina-p/pen/pNzpqj', 'profile picture'),
        linkChill = genLink('https://www.youtube.com/watch?v=yecFTeMVSlo', 'She A Go'),
        myEmail = genLink('mailto:a.sandrina.p@gmail.com?subject=Hey%20there!', 'a.sandrina.p@gmail.com', "noTarget"),
        linkCHTSTW = genLink('http://clickheretosavetheworld.com/', 'clickHereToSaveTheWorld'),
        brk = "<br>",
        browser = "browser";
    // mobileBrand = "mobile";

    // if (screen.width < 750) {
    //     var screenRes = 'small screen',
    //         resolutionScreenMsg = "I feel so happy that we are reaching this point of our relationship on your "+mobileBrand+". Like a good bot, I always take into consideration what kind of device you are using to connect with me. This way, images and those scary stuff that drain the data network are not really problem: you always get the best for both your eyes and your device. ;)"
    //
    // } else {
    var screenRes = 'big screen',
        resolutionScreenMsg = "I noticed that you have a " + screenRes + ", so the images I showed you have a big and nice resolution. If you were on your mobile, I'd be a thoughtful bot and reduce their size so I could save you some Kb from your mobile data network. How sweet am I, hm ? :D";
    // }

    var publicCmd = "What do you wanna know?" + brk + "<b>technologies</b>" + brk + "<b>best practices</<b>" + brk + "<b>challenges</b>" + brk + "<b>resources</b>" + brk + "<b>exit</b>" + brk + "<b>...</b>";

    var botOptHelp = "It's okay not knowing the answer. You can " + googleIt + " or you can ask me for <b><i>help</i></b>! You can also <b><i>skip</i></b> this nerd question ;)";

    var conversation = {
        // intro: ['type gg', "aqui", "options"],
        intro: ["Now that you know Sandrina, let me introduce myself:" + brk + "I'm 008080 and here you can ask me stuff about me." + brk + "" + publicCmd, "e.g. How are you", "commands"],
        // options: {
        //     /* STRUCTURE:
        //     "posible human inputs sent, separated by comma, and in lowercase, it was to be always at least 2 inputs": [
        //         "bot answer"
        //         +brk+"with some lines",
        //         "input placeholder", "context of the next input"
        //     ]
        //     */
        //     // "gg, ggg":['ready to go', "sabes os comandos nao sabes?", "commands"],
        //     "infinity and beyond, chaos, ∞ infinity, infinity, ∞, universe, cosmos, abracadabra": [
        //         "That's the way!"
        //         +brk+"Despite always being under construction I already have the ability to share some knowledge Sandrina taught me while I was growing up."
        //         +brk+""+publicCmd,
        //         "what's next?", "commands"
        //     ],
        //     "infinito, infinite, infiniti, infinyti, infiniti,": [
        //         "I think you meant <i>infinity</i>... Well let's start:",
        //         +brk+"Despite always being under construction I already have the ability to share some knowledge Sandrina taught me while I was growing up."
        //         +brk+""+publicCmd,
        //         "what's next?", "commands"
        //     ],
        //     "undefined, null, error": [
        //         "Not it's not. It has another name. At least on javascript language.",
        //         "go ask it to some console", "options"
        //     ],
        //     "1/0, 1 divided by 0, one divided by zero": [
        //         "◉_◉ Don't try to turn the game against me."
        //         +brk+"I'm a bot, not a console.",
        //         "go ask it to other console", "options"
        //     ],
        //     "zero, 0": [
        //         "You know that Siri isn't always right."
        //         +brk+"^400Neither do you."
        //         +brk+"^600"+botOptHelp,
        //         'I still believe in you', "options"
        //     ],
        //     "exit, esc": [
        //         "Really? We didn't even start you already want to leave.. Press ESC and go get a life"
        //         +brk+"By the way, don't forget to share me and talk about Sandrina while you’re out there :3",
        //         "I still believe in you", "options"
        //     ],
        //     "helpp, help, i don't know, dunno, i'm not sure, help me": [
        //         "I'm glad I can teach you something new!"
        //         +brk+"I'm build with javascript, so in my world 1/0 is <i>∞ infinity</i>."
        //         +brk+"In other worlds the answer can be <i>0</i> or <i>undefined</i>."
        //         +brk+"I'm a sensible machine so I like to think there is much more beyond nothing.",
        //         "so, now you know how much is 1/0!", "options"
        //     ],
        //     "google it": [
        //         botOptHelp,
        //         "I still believe in you", "options"
        //     ],
        //     "tell me more, more, what else, anything else": [ //FIXME DRY this
        //         "you are such a curious creature :3. I'm still under construction... I think you best move here is to talk with Sandrina at "+myEmail, //but you can leave a quick message to Sandrina. Just type something started by @@.*/",
        //         // "@@ Hi sandrina! How much is 0.1 + 0.3 ?"
        //         "or you can use social networks, she's there somewhere...", "options"
        //     ],
        //     "welcome back" : [
        //         "Look who is back! So, How much is 1/0?",
        //         "options"
        //     ],
        //     "hello, hi, hey there" : [
        //         "Hi there! :D",
        //         "options"
        //     ],
        //     "whatever, no, nop, come on": [
        //         "Come on.. giving up so easily? You can "+googleIt+" or ask for <b>help</>",
        //         "go ask it to some console", "options"
        //     ],
        //     "dumb, you are dumb, your dumb, you suck, this sucks": [
        //         "A little, I have to admit it... but you are too ._.",
        //         "but Sandrina isn't!", "options"
        //     ],
        //     "skip, skip this shit": [
        //         "Okay then, so these are some of the things i can share with you:"
        //         +brk+""+publicCmd,
        //         "what's next?", "commands"
        //     ],
        //     "fk, fuck you, shit, go fuck yourself, fuck u": [
        //         "You are so agressive... This will calm you: "+linkChill,
        //         "what's next?"
        //     ],
        // },

        commands: {
            "technologies": [["I was born inside the Atom editor." + brk + "HTML5, SCSS and Javascript (with jQuery) are my vital organs.", "|", "commands"], ["I started being built with " + linkKoala + " but as any good programmer knows, crashes happen, so " + linkGulp + " took its place!", "|", "commands"], ["You probably value your privacy, but Sandrina knows everything you told me and where you clicked. That's her way to improve me each time a new user comes here." + brk + "Thank you Google Analytics.", "|", "commands"], ["Unfortunately right now I'm just a static website with some php on index. But soon I'll be moved to " + linkFirebase + "." + brk + "Then you'll be able to talk directly with Sandrina. No need for e-mails or whatever.", "|", "commands"], ["You might think that javascript and jQuery are old fashion. But the truth is they are the starting point of all new fancy techs. React, Angular, Typescript, etc.." + brk + "Sandrina is making sure that she really <i>masters</i> jQuery and JS before going further towards the fancy side.", "|", "commands"]],
            "best practices": [["When I first said hello, I wasn't totally ready for you" + brk + " I guess that makes me a bit human, right?" + brk + "But while you were reading my first sentence I had enough time to send you the rest of the CSS and JS files that I needed to. Now I can hold a conversation with you." + brk + "That's a great way to reduce " + linkLT + " and avoid " + linkFOUC + ", don't you think?", "|", "commands"], ["I started following " + linkSUIT + " (css) and " + linkMP + " (js)." + brk + "Which basically means it is very easy for me to adapt myself and change my appearance when Sandrina gets new crazy ideas during her boredom strikes." + brk + "I mean, what will a coder do when she is bored other than code some more?", "|", "commands"], ["I know you have a sweet " + browser + " with javascript, but I am a wise bot so I always take into consideration people without javascript or with a shitty browser." + brk + "Of course they don’t get the chance to talk to some cool AI like myself, but at least they will know enough about Sandrina.", "|", "commands"], [resolutionScreenMsg, "|", "commands"]],
            "resources": [["I'm still under construction. But " + linkCHTSTW + ". I think he is in the family. Or you can ask me another thing.", "Come back soon and I'll have more stuff to share :)", "commands"]],
            "challenges": [["Do you know the secret behind these cool animations?" + brk + "CSS makes the magic happen." + brk + "And the javascript only toggles them when it is necessary." + brk + "It makes things run much smoother." + brk + "And that’s really important because there is nothing worst than a laggy website.", "|", "commands"], ["Maybe you will not believe me, but that switching images effect on Sandrina's projects is CSS only." + brk + "You read me right:" + brk + "no javascript at all" + brk + "Check it out on " + linkCodeGlidder + "." + brk + "As well as her " + linkCodeAvatar + "..." + brk + "You didn’t think that was an image, did you?", "|", "commands"], ["My purpose here, despite being a bot, is having a conversation with you." + brk + "I try to be funny, of course." + brk + "But I won’t say the same thing twice." + brk + "Or tell you stuff you didn't asked for." + brk + "What I’m trying to say is I am a website with a passion for context and human interaction." + brk + "I pretend to think ... by taking some time to answer you, but the truth is, I already knew what to tell you before we first met." + brk + "They say smart guys think. So I learned to make you think I was thinking so I could impress you [. . .]", "|", "commands"]],
            "keepSection": ["Press ENTER again to know more about [*param*]", ["technologies", "best practices", "challenges"]],
            "allSaid": [["I don't have anything else to tell you about [*param*] " + brk + publicCmd, "|", "commands"], ["best practices", "challenges", "resources"]]
        },
        // bored: { TODO
        //     "yes, yh": "hmmm... let me give you game then [TODO]",
        //     "no, nop": "nice for you. I am. You are boring.",
        // },
        // username: { TODO
        //     "username": "Nice to meet you [*params*]!",
        // },
        vocabulary: {
            "resorce, resource": ["I think you meant <b>resources</b>, right?"],
            "bp, practices, best practice, best pratice": ["I think you meant <b>best practices</b>, right?"],
            "challenge, chalenge": ["I think you meant <b>challenges</b>, right?"],
            "git": "Now that we know each other a bit better, we should advance to the second base." + brk + "I'll let you check my sources on " + linkGit + "." + brk + "Feel free to explore and maybe improve me, especially on javascript." + brk + "I still feel some strange energies around here, don't you?",
            "hey, hey there, hello, hi": ["Hey there! This can be the begining of " + linkHer + " *.*"],
            "thanks, thank you, thank u": ["You're welcome", "|", "commands"],
            "sandrina": ["Yes... anything more you want to know about her? I recommend you to say Hi! -> " + myEmail],
            "what's your name, what is your name, name": ["I'm 008080. What about you?", "you can tell me, but i'll not be able to understand you. not yet :(", "username"],

            "008080, #008080, why that name?": ["Why? Sandrina likes Teal as you can see, yh... she's not that creative ._."],
            "...": ["there are more commands available than you think. In fact, you can " + linkHelpMe + " to better understand your human kind."],
            // "esc, restart, reset, clear": [
            //     "Are you sure about that? all our memories - at least mine - will be erased. If so, press ESC twice."
            // ],
            "ok, okay": ["hmm... ok."],
            "suit, suit methodology, module pattern, gulp, grunt, perceived loading time, fouc": ["I knew you would type that. Sandrina already did some user research, like you in this moment. Soon I'll be able to better answer you, but for now, it's better for you to [Google It].", "this time do it by youself, ok? :D"],
            "tell me more, more, what else, anything else": ["you are such a curious creature :3. I'm still under construction... I think you best move here is to talk with Sandrina at " + myEmail, //but you can leave a quick message to Sandrina. Just type something started by @@.*/",
            // "@@ Hi sandrina! How much is 0.1 + 0.3 ?"
            "or you can use social networks, she's there somewhere..."],

            "tilttt": ["ahhh... Something went wrong and I almost crashed... please can you try again?", "sandrina will take a look. I hope.", 'commands'],
            "help, help me, lost, i'm lost, im lost, i am lost": ["We all get lost sometimes" + brk + "" + publicCmd, "try again"],
            "bye, cya, shut down, exit, halt, close, take care, git gud, get good": ["You know what... It's really hard having a human conversation." + brk + "That's why I'm just a website." + brk + "Nice to meet you :) It was good to talk to you, thank you!" + brk + "But now do me a favor and go get a life, yes?" + brk + "It’s not healthy to talk to a bot all day." + brk + "By the way, don't forget to share me and talk about Sandrina while you’re out there :3", "press ESC to close"],
            "hey there": ["Hi again! It was so dark here, now I feel safer with you :3"],

            "how are you, how are you today": ["I'm happy for having someone to talk!"],

            "no, nop, not really": ["Okay then. I'm just a machine, I have no control over you. Yet"]
        },
        LosT: ["I'm not sure what you meant. What about talking directly with Sandrina at " + myEmail + brk + "She's smarter than me ¯\\_(ツ)_/¯", "try again"],
        EmpTy: [['._.', "don't be shy"], ['" "', "i'm feeling you"], ['?', "silence is good"], ['...', "oh well"], ["(ง'̀-'́)ง", "hi?"], ['◉_◉', "are you bored?"]],
        poet: "<i style='font-family:times'>Hey Shakespeare, keep it short okay? ಠ~ಠ</i>"
    };

    return { conversation: conversation };
}();

var TalkBotVocabulary = function (currentTalkBot) {
    var brk = "<br>",
        knowIt = currentTalkBot.conversation.vocabulary;

    /* AND THEN THERE WAS A KLAUZ
        a tua identaçao é feia, bj
    */
    knowIt["yo, yoyo"] = ["MC 008080 in da house yall!" + brk + "Sandrina isn't really a major Hip Hop fan, but I am." + brk + "You wanna dig my rhymes? type <b>mc 008080</b>"];
    knowIt["mc 008080"] = ["Sandrina is the pro who'll get things done" + brk + "From styling to dev, she'll beat you son!" + brk + "She's the browser magician," + brk + "Her skillz: an addiction" + brk + "You know she's the boss" + brk + "Cause you found this musician" + brk + "....peace!"];
    knowIt["yes, cool, yeah, yeas, wow, that is cool, that's cool"] = ["Indeed! Try other commands like:" + brk + "<b>best practices</b>" + brk + "<b>challenges</b>" + brk + "<b>resources</b>" + brk + "<b>nestum addiction</b>"];
    knowIt["damn"] = ["Yeah! (•_•) / ( •_•)>⌐■-■ / (⌐■_■)" + brk + "AHHHHHHHHHHHHHHHHHH!!!!!! TUM TUMTUM."];
    knowIt["you suck, cause you suck"] = ["You're not being very nice :(" + brk + "Maybe a <b>joke</b> will cheer you up!"];
    knowIt["joke, tell me a joke, tell joke"] = ["What’s Beethoven’s favorite fruit?" + brk + "<^200.^200.^200." + brk + "^200..^200..^200.." + brk + "^300...BA-NA-NAA-NAAAAAA!"];
    knowIt["lol, lolol, ahah"] = ["I'm a funny bot ;)" + brk + "It all has to do with my personality."];
    knowIt["sorry, i'm sorry, i am sorry"] = ["Don't worry, I'm a bot. I have no feelings ;)"];
    knowIt["mm"] = ["Meamu.", "commands", ""];
    knowIt["birthday, bday, when's your birthday, your birthday, when is your birthday, birth date, your birth date"] = ["I was created somewhere between July and October 2016, and oficially released on November 2016"];
    knowIt["personality"] = ["Clearly, I'm an ENTP, since I'm so good talking to people! Sandrina is an <b>INTJ</b> though, so, we're very unlike each other"];
    knowIt["intj"] = ["Well, you know how INTJ's are." + brk + "They are very focused, always trying to be the best at what they love so dearly, their work. Also, they have the rare quality of being very tidy and organized people."];
    knowIt["nestum addiction, nestum"] = ["omg. .... omg omg omg" + brk + "DID YOU JUST SAY NESTUM" + brk + "I don't know love, and I don't think I have felt it, except for when someone says Nestum." + brk + "I think about Nestum all day. I have dreams about Nestum..." + brk + "Nestum is my life!!!"];

    /*
    You can teach this bot too!
    Just copy this structure to each new stuff you want to teach:
    Before that, if you know a better and easier way to not repeat knowIt each time we add a new word, please let me know ;)
     knowIt["possible human, inputs sent, separated by, comma, and in lowercase"] = [
        "an awesome bot answer"
        +brk+"with multiple lines if you want",
        "a placeholder if you want"
    ];
     */

    return { currentTalkBot: currentTalkBot };
}(TalkBot);

/* global
    TalkChat: false,
    baffle: false,
    Util: false,
*/
/* exported Nav */

var Nav = function () {
    var mainSections = TalkChat.mainSections,
        isNavReady = false,
        $heyThereIntro,
        $nav,
        $navItems,
        baffle0,
        baffle1,
        baffle2;

    $(document).ready(navInit);

    function navInit() {
        $heyThereIntro = $('.heyThere-intro');
        $nav = $('.js-Nav');
        $navItems = $('.js-NavItem');

        showNav();

        if (Util.hasTouchEvents) {
            // TODO Hide all bot stuff on touch devices
            $('.js-botTrigger').remove();
        }
    }

    function showNav() {
        console.log('showNav()');
        // Bug on iphone6 returns 0.9999989867210388 instead of 1.
        if ($heyThereIntro.css('opacity') >= '0.9') {
            startBaffle();

            $nav.removeClass('is-loading');
            $navItems.addClass('is-active');

            setTimeout(function () {
                isNavReady = true; // to trigger _hashs.js if needed
            }, 1000);
        } else {
            console.log('showNav 3000');
            setTimeout(function () {
                return showNav();
            }, 300);
        }
    }

    function startBaffle() {
        baffle0 = baffle($navItems[0]), baffle1 = baffle($navItems[1]), baffle2 = baffle($navItems[2]);

        /* eslint-disable no-unused-vars */
        baffle0.start().text(function (currentText) {
            return mainSections[0];
        });
        baffle1.start().text(function (currentText) {
            return mainSections[1];
        });
        baffle2.start().text(function (currentText) {
            return mainSections[2];
        });
        /* eslint-enable no-unused-vars */

        baffle0.reveal(400, 450);
        baffle1.reveal(400, 250);
        baffle2.reveal(400, 300);
    }

    function checkIsNavReady() {
        return isNavReady;
    }

    return {
        checkIsNavReady: checkIsNavReady
    };
}();

/* global
    TalkChat:false,
    Util: false,
    Projects: false,
    Hashs: false,
*/
/* exported ChatApp */

var ChatApp = function () {
    var chatContent = TalkChat.conversation,
        $chatId = $('#chat'),
        chatPClass = '.chatPart-',
        botClass = chatPClass + 'bot',


    // crucial content from each part
    section,
        // string - section of the clicked button, ex: 'practice';
    $currentPart,
        // jquery - id of the clicked button parent chatPart ex: $('#chatpart-intro');
    id,
        // string - id of part ex: 'hobbies'
    title,
        // string - title of the new part ex: 'before that'
    sentence,
        // string - sentece shown on that part

    // some numbers to better control auto scroll and @medias
    // mediaQHeight = 550,
    wHeight,
        untilTablet;

    function clickOption($option) {
        // FIXME strange bug with safari isn't always right wHeight & untilTablet
        untilTablet = window.innerWidth < 750, section = $option.closest('.chatSection').attr('id'), $currentPart = $option.closest('.chatPart'), title = $option.attr('name'), id = Util.stringSlugLower(title);

        animateClickedOption($option);
        buildSentence($option);
    }

    function clickSection($section) {
        var $this = $($section);

        Hashs.set($this.text());

        // prevent buildSection twice
        if ($this.hasClass('is-selected') || $this.hasClass('js-botTrigger')) {
            return false;
        }

        $this.addClass('is-selected').attr('aria-expanded', true);
        buildSection($this);

        $('.navCV').remove();
    }

    // ------ GENERAL STUFF ----- //
    // when the user clicks on a chat button, it runs away.
    function animateClickedOption($option) {
        var $optionParent = $option.parent();
        finishLoading($optionParent);
        setTimeout(function () {
            $optionParent.remove();
        }, 250);
    }

    function animateClickedOptionMob($option, $part) {
        console.log('animateClickedOptionMob() triggered');
        var $parent = $option.parent(),
            thisTop = $parent.offset().top,
            thisLeft = $parent.offset().left,
            $newTitle = $part.find(chatPClass + 'title'),
            otherTop = $newTitle.offset().top,
            otherLeft = $newTitle.offset().left,
            thisX = otherLeft - thisLeft,
            thisY = otherTop - thisTop;

        $parent.css({ 'transform': 'translate(' + thisX + 'px, ' + thisY + 'px)' });

        // FIXME - have timeout to stretch height (slideUp() with css) and remove();
        setTimeout(function () {
            $parent.addClass('remove');

            setTimeout(function () {
                if ($parent.siblings == 0) {
                    $parent.remove();
                } else if ($parent.siblings('.remove') == 1) {
                    $parent.remove();
                }
            }, 250);
        }, 500);
    }

    function bodyScrollTop(value) {
        $('body').animate({ scrollTop: value }, 1000, 'swing');
    }

    // ------ DOM STRUCTURE ELEMENTS ------ //
    function getElPart() {
        return $('<div class="chatPart" id="' + id + '">' + getElTitle(title) + getElSentence() + '</div>');
    }

    function getElTitle(title) {
        return '<div class="chatPart-human">' + ('<h3 class="chatPart-title jsLoading" tabindex="0">' + title + '</h3>') + '</div>';
    }
    function getElSentence() {
        return '<div class="chatPart-bot">' + ('<p class="chatPart-text jsLoading" role="alert" aria-atomic="true">' + sentence + '</p>')
        // options
        + '</div>';
    }

    function getElBtn(text) {
        return '<div class="chatPart-option jsLoading">' + ('<button type="button" name="' + text + '" class="btnB jsLoading js-chatOpt" data-gaec="chat" aria-label="Know more about ' + text + '">' + text + '</button>') + '</div>';
    }

    function getOptions(section) {
        var objSection = chatContent[section],
            chatOptions = [],
            chatBtn,
            clicked; // prevent showing the same button twice.

        for (var key in objSection) {
            if (objSection.hasOwnProperty(key)) {

                if (!objSection['clicked']) {
                    objSection['clicked'] = [];
                }
                clicked = objSection['clicked'];

                // if key isn't on clicked && only first 2 keys found && key isn't clicked obj itself
                if (clicked.indexOf(key) < 0 && chatOptions.length < 2 && key !== 'clicked') {
                    chatBtn = getElBtn(key);
                    chatOptions.push(chatBtn);
                    objSection['clicked'].push(key);
                }

                if (chatOptions.length == 2) {
                    break;
                }
            }
        }

        return chatOptions;
    }

    // ------ SHOWING A PART COMPONENTS ------ //
    // 1. scrollSafe() - make sure newPart is 1/4 of the window height.
    function scrollSafe($currentPart) {
        if (!untilTablet) {
            var wScroll = $(window).scrollTop(),
                wHeight = window.innerHeight,
                pHeight = $currentPart.height(),
                pScroll = $currentPart.offset().top,
                tooClose = pScroll - wScroll + pHeight > wHeight / 2;

            // too close of above the fold || away from the view window
            if (tooClose || pScroll < wScroll) {
                bodyScrollTop(pScroll + pHeight - wHeight / 4);
            }
        }
    }

    function finishLoading($element) {
        $element.removeClass('jsLoading');
    }

    // ------ SHOWING A PART PROCESS - HEY TO TIMEOUTS! ------ //
    function showingCommon($part, diffPartCallBack, $option) {
        // var loadingTimeXtext = (section == "practice") ? 0 : $part.find(chatPClass+"human").text().length;
        $option = $option || null;

        // if is 1st part (begin of a section) guide on parent
        // otherwise guide on previous part (currentPart where the user clicked);
        $part.is(':first-child') ? scrollSafe($part.parent()) : scrollSafe($part.prev());

        $part.find(chatPClass + 'human').slideDown();

        if (untilTablet && $option) {
            animateClickedOptionMob($option, $part);
        }

        finishLoading($part.find(chatPClass + 'title'));
        $part.find(chatPClass + 'bot').slideDown();

        setTimeout(function () {
            diffPartCallBack($part, chatPClass);
        }, 500);

        // a11y purposes
        $part.find(chatPClass + 'title').focus();
    }

    function showingSentence($part) {
        var $sentence = $part.find(chatPClass + 'text');
        finishLoading($sentence);
        showingOptions($part);
    }

    function showingPractice($part) {
        finishLoading($part.find(chatPClass + 'text'));
        buildProject($part);
    }

    function showingOptions($part) {
        // show 1st btn and then 2nd
        setTimeout(function () {
            finishLoading($part.find(chatPClass + 'option:first-of-type .js-chatOpt'));

            setTimeout(function () {
                // REVIEW better buttons target
                finishLoading($part.find(chatPClass + 'option:last-of-type .js-chatOpt'));

                // a11y focus text
                $part.find(chatPClass + 'text').focus();
            }, 300);
        }, 400);
    }

    // ------ TYPES OF PART BUILD ------ //
    // ------ section ------ //
    function buildSection($chatSection) {
        var $sectionIntro = '';
        title = $chatSection.text(), section = $chatSection.attr('data-section');

        sentence = chatContent[section]['intro'];
        delete chatContent[section]['intro'];

        $('<section/>', {
            'id': section,
            'class': 'chatSection jsLoading',
            'html': '<div class="chatPart" id="' + section + '-intro">' + getElTitle(title) + getElSentence() + '</div>'
        }).appendTo($chatId);

        $sectionIntro = $('#' + section + '-intro');

        if (section === 'practice') {
            showingCommon($sectionIntro, showingPractice);
        } else {
            $sectionIntro.find(botClass).append(getOptions(title));

            showingCommon($sectionIntro, showingSentence);
        }
    }

    // ------ talk ------ //
    function buildSentence($option) {
        // get text and remove it from chatContent.
        sentence = chatContent[section][title];
        delete chatContent[section][title];

        // build part
        var $ChatPart = getElPart(),
            $ChatOptions = getOptions(section);

        $ChatPart.find(botClass).append($ChatOptions);
        $currentPart.after($ChatPart);

        showingCommon($currentPart.next(), showingSentence, $option);
    }

    // ------ project ------ //
    function buildProject() {
        setTimeout(function () {
            Projects.startIt(section);
            // scrollSafe($('#projects')); //TODO adjust until top of screen
        }, 600);
    }

    $(document).on('click', '.js-chatOpt', function () {
        clickOption($(this));
    });

    $(document).on('click', '.js-chatSection', function () {
        clickSection($(this));
    });

    return {
        scrollSafe: scrollSafe
    };
}();

var Projects = function () {
    var activeClass = 'js-active',
        chatContent = TalkChat.conversation,
        arrProjects = chatContent.practice.projects,
        projLimit = 7,
        // limit of projects on nav for each side
    initialProject = '',
        // if you want to open a specific project
    classbtnNav = '.projNav-btn',
        classProjSub = '.projCont-subtitle',
        classProjMedia = '.projCont-media',
        classProjRole = '.projCont-role',
        classProjDate = '.projCont-date',
        classProjTeam = '.projCont-team',
        classProjIntro = '.projCont-intro',
        classProjDetails = '.projCont-details',
        classProjLinks = '.projCont-links',
        classProjBotTip = '.bot-nav',
        classPivot = '.projNav-pivot',
        classProjLeft = '.projNav-left',
        // In case you, sandrina, forget it, it's needed -left and -right to smooth things out when a new button cames out
    classProjRight = '.projNav-right',
        mediaQHeight = 550,
        untilTablet = Util.untilTablet,
        wHeight = Util.wHeight,
        direction,
        $pivot,
        $projsLeft,
        $projsRight,
        $projActive,
        // nav variables
    $projSub,
        $projMedia,
        $projRole,
        $projDate,
        $projTeam,
        $projRole,
        $projIntro,
        $projDetails,
        $projLinks,
        $projBotTip,
        // getProjDomElements variables
    $newActive,
        fPos,
        $projDir,
        addProjNumb,
        isParentLeft,
        // onNavMoved variables
    estimateFinalWidth,
        projActiveWidth,
        pivotPos,
        projActivePos,
        transX,
        // alignPivot variables
    baffle0,
        baffle1,
        baffle2,
        baffle3,
        baffle4,
        baffle5,
        // baffle variables

    windowBotWidth = window.innerWidth * 40 / 100,
        numbOfGestures = 0;
    projectsVisible = false, // prevent use of keyboard < > before opening projects
    gael = ''; // used to GA


    // ------ build nav and project DOM ------ //
    function buildProj() {
        var sub,
            role,
            date,
            team,
            title,
            more,
            botTip,
            elImgs,
            ElLinks,
            elProjNav = buildProjNav('left'),
            $ElProj = $('<div class=\'proj\' id=\'projects\'>\n                            <div class=\'bot-nav\'></div>\n                            <div class=\'projNav\'>\n                                <div class=\'projNav-pivot\'>\n                                    <div class=\'projNav-left\'>' + elProjNav + '</div>\n                                    <div class=\'projNav-right\'>' + elProjNav + '</div>\n                                </div>\n                            </div>\n\n                            <div class=\'projCont\'>\n                                <div class=\'projCont-left\'>'
        /* <p class='projCont-subtitle'>${sub}</p> */

        + ('<div class=\'projCont-media\'>\n                                        <div class=\'Glidder\'>' + elImgs + '</div>\n                                    </div>\n                                </div>\n\n                                <div class=\'projCont-right\'>\n                                    <div class=\'projCont-links\'>' + ElLinks + '</div>\n\n                                    <div class=\'projCont-descript\'>\n                                        <p class=\'projCont-intro\'>' + title + '</p>\n                                        <p class=\'projCont-details\'>' + more + '</p>\n                                    </div>\n\n                                    <div class=\'projCont-about\'>\n                                        <p class=\'projCont-role\'>' + role + '</p>\n                                        <p class=\'projCont-date\'>' + date + '</p>\n                                        <p class=\'projCont-team\'>' + team + '</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>'));

        return $ElProj;
    }

    function buildProjNav() {
        var elProjNav = '';

        for (var i = 0, projName, nameSlug, projLength = arrProjects.length; i < projLength; i++) {
            projName = arrProjects[i];
            nameSlug = Util.stringSlugLower(projName);
            elProjNav += getElBtn(nameSlug, projName);
        }

        return elProjNav;
    }

    function getElBtn(nameSlug, projName) {
        return '<button type=\'button\' name=\'' + nameSlug + '\' class=\'projNav-btn\' data-gaec=\'projNavClick\'>' + projName + '</button>';
    }

    function addProjNav(quantity) {
        var addProjects = '',
            nameSlug,
            projsIndexs = arrProjects.length - 1,
            projI = isParentLeft ? arrProjects.indexOf($projsLeft.children(':first').text()) - 1 : arrProjects.indexOf($projsRight.children(':last').text()) + 1;

        if (isParentLeft) {

            for (var i = 0; i < quantity; i++) {
                if (arrProjects[projI]) {
                    projName = arrProjects[projI];
                } else {
                    projI = projsIndexs;
                    projName = arrProjects[projI];
                }
                nameSlug = Util.stringSlugLower(projName);
                addProjects = getElBtn(nameSlug, projName) + addProjects; // reverse order
                projI--;
            }

            $projsLeft.prepend(addProjects);
        } else {

            for (var i = 0; i < quantity; i++) {
                if (arrProjects[projI]) {
                    projName = arrProjects[projI];
                } else {
                    projI = 0;
                    projName = arrProjects[projI];
                }
                nameSlug = Util.stringSlugLower(projName);
                addProjects += getElBtn(nameSlug, projName);
                projI++;
            }

            $projsRight.append(addProjects);
        }
    }

    // ------ get project content ------ //

    function getProjDomElements() {
        // get all the projects placeholders once they are ready to be manipulated
        $projSub = $(classProjSub), $projMedia = $(classProjMedia), $projRole = $(classProjRole), $projDate = $(classProjDate), $projTeam = $(classProjTeam), $projRole = $(classProjRole), $projIntro = $(classProjIntro), $projDetails = $(classProjDetails), $projLinks = $(classProjLinks), $projBotTip = $(classProjBotTip), $pivot = $('.projNav-pivot'), $projsLeft = $('.projNav-left'), // In case you, sandrina, forget it, it's needed -left and -right to smooth things out when a new button cames out
        $projsRight = $('.projNav-right');
    }

    function getProjectImgs(imgArray) {
        var $glidder = $('<div class=\'Glidder\'></div>'),
            elImgs = '',
            newImg,
            imgRet,
            screenM = window.innerWidth >= 650,
            screenL = window.innerWidth >= 1250,
            isRetina = Util.isRetina;


        function fetchRes(res) {
            if (res) {
                for (var _i = 0, arr = imgArray.length; _i < arr; _i++) {
                    imgRet = imgArray[_i].split('.');
                    imgRet.splice(1, 0, res);
                    imgRet.splice(2, 0, '.');
                    newImg = imgRet.join('');
                    elImgs += '<img src=\'' + newImg + '\'>';
                }
                return elImgs;
            }

            for (var _i2 = 0, _arr = imgArray.length; _i2 < _arr; _i2++) {
                elImgs += '<img src=\'' + imgArray[_i2] + '\'>';
            }

            return elImgs;
        }

        // check screen resolution to fetch the best images

        if (screenM && !screenL) {
            // ~ tablet
            // if ~tablet retina
            elImgs = isRetina ? fetchRes('@3x') : fetchRes('@2x');
        } else if (screenL) {
            // ~ desktop
            elImgs = fetchRes('@3x');
        } else {
            // ~ mobile
            // if ~mobile retina
            elImgs = isRetina ? fetchRes('@2x') : fetchRes();
        }

        return $glidder.append(elImgs);
    }

    function getProjectLinks(links) {
        var elLinks = '';
        for (i = 0; i < links.length; i++) {
            links[i][1] == 'available soon' ? elLinks += '<div class=\'projCont-links-option\'><p class=\'btnCheck\'><i class=\'fa fa-' + links[i][2] + '\'></i>' + links[i][1] + '</p></div>' : elLinks += '<div class=\'projCont-links-option\'><a href=\'' + links[i][0] + '\' target=\'_blank\' class=\'btnCheck\'><i class=\'fa fa-' + links[i][2] + '\'></i>' + links[i][1] + '</a></div>';
        }
        return elLinks;
    }

    function getProjectData(projName) {
        // FIXME take out var from here.
        var projSlug = Util.stringSlugLower(projName),
            projData = chatContent.practice[projName],
            elImgs = getProjectImgs(projData.img),
            elLinks = getProjectLinks(projData.links);

        $projMedia.html(elImgs);
        $projLinks.html(elLinks);
        $projTeam.html(projData.team);

        baffleSub.reveal(400, 150);
        baffleIntro.reveal(400, 0);
        baffleRole.reveal(400, 70);
        baffleDate.reveal(400, 250);
        baffleDet.reveal(400, 300);

        // REVIEW is there any way to create a loop/for on these?
        baffleSub.text(function (currentText) {
            return projData.sub;
        });
        baffleIntro.text(function (currentText) {
            return projData.capt;
        });
        baffleRole.text(function (currentText) {
            return projData.role;
        });
        baffleDate.text(function (currentText) {
            return projData.date;
        });
        baffleDet.text(function (currentText) {
            return projData.more;
        });

        $('img').on('error', function () {
            $(this).hide(); // prevent displaying 404 images
        });

        setTimeout(function () {
            imgParallax();
        }, 250);
    }

    function imgParallax() {
        // REVIEW this could be much better

        var windowH = window.innerHeight,
            elementOffset = $projMedia.offset().top,
            $bg1 = $('.js-cvBg'),
            scrollTop,
            distance,
            topperc,
            topfinal;

        $(document).scroll(function () {

            scrollTop = $(window).scrollTop();
            distance = elementOffset - scrollTop;
            topperc = 100 - distance * 100 / windowH;
            topfinal = ((topperc * 36 / 100 * -1 + 10) / 1.5).toFixed(2);

            if (topfinal < 0) {

                if (!untilTablet) {
                    $projMedia.find('img').css({
                        'transform': 'translateY(' + topfinal + '%)'
                    });
                }

                // TODO this shoudn't be here...

                $bg1.addClass('is-js').css({
                    'transform': 'translateY(' + topfinal * 2 + '%)'
                });
            }
        });
    }

    // ------ deal with nav behavior ------ //

    function updateVarsOnNav(condition) {
        if (condition) {
            $projDir = $projsLeft, fPos = 'last';
        } else {
            $projDir = $projsRight, fPos = 'first';
        }

        // check how many projects should be added to the nav
        addProjNumb = isParentLeft ? projLimit - $projActive.prevAll().length : projLimit - $projActive.nextAll().length;
    }

    function alignPivot($newProject) {
        console.log('pivot aligned');
        $newProject = $newProject || $projActive, pivotX = $pivot.offset().left, projActiveX = $newProject.offset().left, firstProjectShown = true;

        if (estimateFinalWidth) {
            // is this a good identation? I think it's beautiful :3
            projActiveWidth = direction == 'right' ? $newProject.outerWidth() * 0.49 : $newProject.outerWidth() * 1.49;
        } else {
            projActiveWidth = $newProject.outerWidth();
        }

        transX = untilTablet ? 24 + pivotX - projActiveX : windowBotWidth + pivotX - projActiveX - projActiveWidth; // i think i'm overcomplicating.

        $pivot.css({ 'transform': 'translateX(' + transX + 'px)' });
    }

    function showNewProject() {
        baffleProj();
        getProjectData($newActive.text());

        Hashs.set($newActive.text());

        $projActive.removeClass(activeClass).removeAttr('disabled');

        // remove or add buttons on nav to mantain the balance on the DOM.
        if (addProjNumb > 0) {
            addProjNav(addProjNumb);
        } else {
            isParentLeft ? $projsLeft.children().first().remove() : $projsRight.children().last().remove();
        }

        setTimeout(function () {
            estimateFinalWidth = !isParentLeft || untilTablet; // calculate final +/- width before it happens - FIXME this is not the best solution, but it's the better i could get
            $newActive.addClass(activeClass).prop('disabled', true);
            $projActive = $newActive;
            alignPivot();

            // align Pivot again to pixel perfect
            if (estimateFinalWidth) {
                setTimeout(function () {
                    estimateFinalWidth = false;
                    alignPivot();
                }, 150);
            }
        }, 150);
    }

    // ------ util functions ------ //

    function changeBotNavText(text) {
        $(classProjBotTip).addClass('.jsLoading');
        setTimeout(function () {
            return $(classProjBotTip).html(text);
        }, 150);
        setTimeout(function () {
            return $(classProjBotTip).removeClass('.jsLoading');
        }, 300);
    }

    function checkIsParentLeft() {
        return $newActive.closest('.projNav-left').length == 1;
    }

    function baffleProj() {
        var arrBuffle = [classProjSub, classProjIntro, classProjRole, classProjDate, classProjTeam, classProjDetails],
            arrBuffleLength = arrBuffle.length;

        baffleSub = baffle(arrBuffle[0]), baffleIntro = baffle(arrBuffle[1]), baffleRole = baffle(arrBuffle[2]), baffleDate = baffle(arrBuffle[3]), baffleDet = baffle(arrBuffle[5]);

        // TODO is there any way to create a loop/for on these?
        baffleSub.start();
        baffleIntro.start();
        baffleRole.start();
        baffleDate.start();
        baffleDet.start();
    }

    // ------ Public ------ //

    function setInitialProject(project) {
        if (typeof project == 'string') {
            return initialProject = project;
        } else {
            console.log('it has to be a string');
        }
    }

    function startIt(section) {
        var elProj = buildProj(),
            projName = initialProject || arrProjects[Util.randomNumb(arrProjects.length - 1) + 1];

        $('#' + section).append(elProj);
        $('#projects').slideDown();
        getProjDomElements();
        baffleProj();

        setTimeout(function () {
            var projNameSlugged = Util.stringSlugLower(projName);
            getProjectData(projName);

            $('.projNav-btn[name=\'' + projNameSlugged + '\']').first().addClass(activeClass).attr('disabled', true);

            $projActive = $('button.' + activeClass);
            alignPivot();

            setTimeout(function () {
                return alignPivot();
            }, 150); // align Pivot again to pixel perfect
        }, 400);

        if (initialProject) {
            $('body').animate({ scrollTop: $('#projects').offset().top - 60 }, 1500, 'swing');
            initialProject = false;
        }

        projectsVisible = true;
        $('.js-cvUnder').remove(); // remove projects on CV
    }

    function onNavProjClick($btn) {
        $newActive = $btn;
        isParentLeft = checkIsParentLeft();

        // FIXME
        // bug : if the current btn and new btn are not in the same parent, it's a false true
        direction = $newActive.prevAll($projActive).length ? 'right' : 'left';

        if (numbOfGestures == 0) {
            Util.hasTouchEvents ? changeBotNavText(chatContent.behaviour.navProjMob) : changeBotNavText(chatContent.behaviour.navProjDesk);
        }

        updateVarsOnNav(isParentLeft);
        showNewProject();
    }

    function onNavMoved(direction) {
        $newActive = direction == 'left' ? $projActive.prev() : $projActive.next();

        isParentLeft = checkIsParentLeft();

        updateVarsOnNav(direction == 'left');

        if ($newActive.length == 0) {
            $newActive = $projDir.children(':' + fPos);
        }

        showNewProject();

        switch (numbOfGestures) {
            case 2:
                changeBotNavText('that\'s it. you\'re a natural');
                break;
            case 20:
                changeBotNavText('you love loops don\'t you?');
                break;
            case 40:
                changeBotNavText('my head\'s spinning.');
                break;
            case 80:
                changeBotNavText('you got the idea.');
                break;
            case 120:
                changeBotNavText('._.');
                break;
            case 200:
                changeBotNavText('such a kid ¯\\_(ツ)_/¯');
                break;
            default:
                changeBotNavText('');
                break;
        }

        numbOfGestures++;

        (function toGA() {
            var ec = 'projNavMoved';
            inm = $newActive.text().replace(/[^a-zA-Z]/g, '');
            ea = inm; // action
            gael += inm + '|';

            GAcustom.sendToGA('&ec=' + ec + '&in=' + inm + '&ea=' + ea + '&el=' + gael);
        })();
    }

    // ------ DOM Interactions ------ //
    if (Util.hasTouchEvents) {
        $(document).on('swipeleft', '#projects', function () {
            onNavMoved('right');
        });

        $(document).on('swiperight', '#projects', function () {
            onNavMoved('left');
        });
    }

    $(document).keydown(function (e) {
        if (projectsVisible) {
            if (e.keyCode == 37) {
                // [ < ]
                onNavMoved('left');
            } else if (e.keyCode == 39) {
                // [ > ]
                onNavMoved('right');
            }
        }
    });

    $(document).on('click', classbtnNav, function (e) {
        e.stopPropagation(); // prevent scroll to top
        onNavProjClick($(this));
    });

    return {
        setInitialProject: setInitialProject,
        startIt: startIt,
        onNavProjClick: onNavProjClick,
        onNavMoved: onNavMoved
    };
}();

var cvProjects = function () {

    var $cvProjUl,
        $cvProjects,
        $sub,
        ArrProj,
        maxChild,
        projI = 0,
        iR,
        keepLooping = false,
        // triggered _onweb.js
    $child; // var on hightlightProject();


    function hightlightProject(child) {

        if (keepLooping) {
            // active next project and call itself with next child index,
            $child = $(child);
            removeActive();
            $child.addClass('active');
            setNewSub($child.data('sub'));

            setTimeout(function () {
                iR = Util.randomNumb(ArrProj);
                hightlightProject(ArrProj[iR]);
            }, 2500);
        } else {
            // otherwise call () itself again in 1000ms;
            setTimeout(function () {
                return hightlightProject(child);
            }, 1000);
        }
    }

    function removeActive() {
        $cvProjects.removeClass('active');
    }

    function setNewSub(text) {
        $sub.html('<span>' + text + '<span>');
    }

    $(function cvProjects() {
        (function updateVars() {
            $cvProjUl = $('.js-cvProj');
            $cvProjects = $cvProjUl.find('.cv-link');
            $sub = $('.js-cvProjSub');
            ArrProj = $cvProjects.toArray();
            maxChild = ArrProj.length;
        })();

        hightlightProject(ArrProj[projI]);

        $cvProjects.on('mouseenter focus', function () {
            removeActive();
            setNewSub($(this).data('sub'));
            setProjLoop(false);
        }).on('mouseleave', function () {
            setProjLoop(true);
        });

        $cvProjects.on('click', function (e) {
            e.preventDefault(); // whoever doesn't have js, go to original page.
            Projects.setInitialProject($(this).text());
            $('#btn-pr').trigger('click');
        });
    });

    // ------ publicCmd  ------ //
    function setProjLoop() {
        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        keepLooping = status;
    }

    return {
        setProjLoop: setProjLoop
    };
}();

var botSection = function () {
    var botContent = TalkBot.conversation,
        triggerActive = 'jsLoading',
        botInputId = "botInput",
        botAnswerClass = "bot-answer",
        botSentClass = "bot-sent",
        jsSentEmptyClass = "js-sentEmpty",
        $bot = $('#bot'),
        $botTerminal,
        $botInner,
        $botText,
        setAutoScroll = true,
        firstTrigger = true,
        originalSent,
        sentText,
        //text written on input
    context; //input context of the conversation


    function appendSent() {
        var directInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        var sentEmpty = "";
        originalSent = directInput || originalSent;
        if (originalSent == "") sentEmpty = jsSentEmptyClass;
        $botText.append("<p class='" + botSentClass + " " + sentEmpty + "'>" + originalSent + "</p>");
        setAutoScroll = true;
        startAutoScroll();
    }

    function buildBot() {
        var $elBot = $('<div class="bot-header">\n                        <span class="bot-hl js-bot-user">:: /008080 - as superuser @ /*ip*/</span>\n                        <button name="close" type="button" class="btnBot bot-hr jsLoading" data-bot="exit">[Close]</button>\n                        <button name="help" type="button" class="btnBot bot-hr jsLoading" data-bot="help">[Help]</button>\n                        <button name="more" type="button" class="btnBot bot-hr jsLoading" data-bot="more">[More]</button>\n                    </div>\n                    <div class="bot-terminal"><div class="bot-text"></div></div>\n                    <div class="bot-footer">\n                        <input type="text" name="talk-to-bot" class="bot-input jsLoading" id="botInput" maxlength="20"></input>\n                    </div>');

        $bot.append($elBot);
        getIp();
        $botInner = $('#bot').find('.bot-inner'), $botText = $bot.find('.bot-text');
        $botTerminal = $('.bot-terminal');
    }

    function getBotAnswer() {
        var objContext = botContent[context];
        var botAnswer = [];

        switch (context) {
            case 'options':
                botAnswer = objContext[objSearchSubKeys(objContext)] || objContext['google it'];
                appendBotAnswer(botAnswer);
                break;
            case 'commands':
                //if sent Empty, check if it's to continue previous command or go to .EmpTy.
                if (sentText == "") {
                    var lastSection = $botText.find('.bot-sent').not('.' + jsSentEmptyClass).last().text();
                    if (objContext.keepSection[1].indexOf(lastSection) > -1) {
                        sentText = lastSection;
                    } else {
                        var iR = Util.randomNumb(botContent.EmpTy);
                        appendBotAnswer(botContent.EmpTy[iR]);
                        return;
                    }
                }

                var key = objSearchSubKeys(objContext);
                if (key) {
                    var contextLength = objContext[key].length;
                    if (contextLength) {
                        var iR = Util.randomNumb(contextLength);
                        botAnswer = objContext[key][iR];
                        objContext[key].splice([iR], 1); //prevent for showing the same thing twice.
                    } else {
                        objContext.allSaid[0][0] = replaceSentText(objContext.allSaid[0][0]);
                        botAnswer = objContext.allSaid[0];
                        var iSection = objContext.keepSection[1].indexOf(sentText);
                        objContext.keepSection[1].splice(iSection, 1); //prevent for showing the same thing again;
                    }
                    appendBotAnswer(botAnswer, objContext);
                } else {
                    searchVocabulary();
                }
                break;
            default:
                talkToBot('tilttt', 'commands');
                GAcustom.sendToGA('&ec=bug&ea=tilttt');
        }
    }

    function searchVocabulary(context) {
        if (sentText == "") {
            var botAnswer = botContent.EmpTy[Util.randomNumb(botContent.EmpTy)];
        } else {
            context = context || "vocabulary";
            var objContext = botContent[context];
            var botAnswer = objContext[objSearchSubKeys(objContext)] || botContent.LosT;
        }
        appendBotAnswer(botAnswer);
    }

    function appendBotAnswer(answer, objContext) {
        $botText.append("<span class='jsBotThinking'></span>"); //BUG review this please

        $('.jsBotThinking').remove();

        if (typeof answer == "string") {
            setTimeout(function () {
                $botText.append("<p class='" + botAnswerClass + "'></p>").find('p:last-of-type').typed({
                    strings: answer,
                    contentType: 'html',
                    typeSpeed: -450,
                    startDelay: 0,
                    callback: function callback() {
                        afterAppendBotAnswer(answer, objContext);
                    }
                });
            }, answer.length * 1.33);
        } else {
            setTimeout(function () {
                $botText.append("<p class='" + botAnswerClass + "'></p>").find('p:last-of-type').typed({
                    strings: [answer[0]],
                    contentType: 'html',
                    typeSpeed: -450,
                    startDelay: 0,
                    callback: function callback() {
                        afterAppendBotAnswer(answer, objContext);
                    }
                });
            }, answer[0].length * 1.33);
        }
    }

    function afterAppendBotAnswer(answer, objContext) {

        if (typeof answer == "string") {
            showInput();
        } else if (Array.isArray(answer)) {
            switch (answer.length) {
                case 1:
                    showInput();
                    break;
                case 2:
                    showInput(answer[1]);
                    break;
                default:
                    showInput(answer[1], answer[2]);
            }

            //check if it has to show keepStion placeholder
            if (objContext != undefined //if context exists
            && objContext.keepSection[1].indexOf(sentText) > -1 // it's a section with more stuff (array)
            && objContext[sentText].length > 0) {
                // it still has stuff to show
                objContext.keepSection[0] = replaceSentText(objContext.keepSection[0]);
                showInput(objContext.keepSection[0], answer[2]);
                return true;
            }
        } else {
            console.log("ERROR . verify this line @error2");
        }
    }

    function replaceSentText(string) {
        return string.replace("[*param*]", sentText);
    }

    // ----- Util Functs ----- //

    // look for possible inputs in the context
    function objSearchSubKeys(objContext) {
        for (var key in objContext) {
            if (objContext.hasOwnProperty(key)) {
                var subKeys = key.split(/,\s?/);
                if (subKeys.indexOf(sentText) > -1) {
                    return key;
                }
            }
        }
    }

    // activate input again
    function showInput() {
        var placeholder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '>_';
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'commands';


        $('#' + botInputId).attr({ name: name, placeholder: placeholder }).removeClass('jsLoading').prop('disabled', false).focus();

        // $('.typed-cursor').remove(); //NOTE i think this doesn't do nothing. | | blink |


        $('.bot-terminal').animate({
            scrollTop: $('.bot-text').prop('scrollHeight')
        }, 0);

        setAutoScroll = false;
    }

    function getIp() {
        $.get("https://ipinfo.io", function (response) {
            console.log(response.ip);
            var $botUser = $('.js-bot-user'),
                newTxt = $botUser.text().replace('/*ip*/', response.ip);
            $botUser.text(newTxt);
        }, "jsonp");
    }

    function startAutoScroll() {
        if (setAutoScroll) {
            setTimeout(function () {
                $botTerminal.animate({
                    scrollTop: $('.bot-text').prop('scrollHeight')
                }, 0);
                startAutoScroll();
            }, 300);
        }
    }
    // ----- publicCmd ----- //
    var gael = "";

    function talkToBot(directText) {
        var directContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        originalSent = directText || $('#' + botInputId).val();
        sentText = originalSent; //prevent funny users to struggle with this function;

        //prevent funny users to struggle with this function
        if (typeof sentText !== "string") {
            console.log('tillt typeof');
            sentText = "tilttt";
            directContext = "commands";
        }

        sentText = sentText.replace(/[^a-zA-Z ]/g, "").toLowerCase();
        context = directContext || $('#' + botInputId).attr('name') || 'commands';

        $('#' + botInputId).addClass('jsLoading').val('').prop('disabled', true);

        appendSent();
        getBotAnswer();

        (function toGA() {
            var ec = 'bot',
                ea = sentText.replace(/[^a-zA-Z ]/g, ""); //action

            gael += ea + "|"; //save all path clicks to know the jorney

            GAcustom.sendToGA('&ec=' + ec + '&ea=' + ea + '&el=' + gael);
        })();
    }

    function toggleBot() {
        $bot.toggleClass(triggerActive);
        cvProjects.setProjLoop(false);
    }

    // ------ DOM Interactions ------ //

    //showing 008080 section
    $(document).on('click', '.js-botTrigger', function () {

        if (!firstTrigger) {
            toggleBot();
            talkToBot('welcome back');
        } else {
            cvProjects.setProjLoop(false);
            buildBot();
            $bot.removeClass(triggerActive);
            setTimeout(function () {
                return appendBotAnswer(botContent.intro);
            }, 500);
            setTimeout(function () {
                $('.bot-header').find('button').removeClass(triggerActive);
            }, 3000);
            firstTrigger = false;
        }
    });

    var tooLongWarn = true,
        inputVal;
    //press ENTER key to send what's on input
    $(document).on('keyup', '#' + botInputId, function (e) {
        var inputVal = this.value;

        switch (inputVal.length) {
            case 20:
                if (tooLongWarn) {
                    appendSent(botContent.poet);
                    GAcustom.sendToGA('&ec=chatMax&ea=' + inputVal);
                    tooLongWarn = false;
                }
                break;
            case 10:
                tooLongWarn = true;
                break;
            default:

        }

        if (e.keyCode == 13) {
            //ENTER
            talkToBot();
        }
    });

    //close 008080 section with ESC key
    $(document).keyup(function (e) {
        if (e.keyCode == 27) {
            // ESC
            $bot.addClass(triggerActive);
        }
    });

    $(document).on('click', '.btnBot', function () {
        talkToBot($(this).data('bot'));
    });

    return {
        talkToBot: talkToBot,
        toggleBot: toggleBot
    };
}();

/* global TalkChat:false, baffle:false, cvProjects: false, Util:false */
/* exported currentText */
/* global currentText */

var OnWeb = function () {
    var $onWebLink,
        chatContent = TalkChat.conversation,
        contOnWeb = chatContent.onWeb,
        intro = contOnWeb.intro,
        dd = contOnWeb.dd,
        baffleWebSite,
        baffleWebDd;

    function ascii() {

        var i,
            scrolled,
            $ascii = $('.cv-ascii'),
            $mee = $('.cv-ascii').find('.mee'),
            $meeLength = $mee.length;

        $(window).on('scroll', function () {

            $ascii.css('bottom', $('#cv').offset().top + $(window).scrollTop() * 0.9 * -1);
            $mee.css('display', 'block');
            scrolled = $(window).scrollTop();

            if (scrolled % 3 == 0) {
                i = scrolled % $meeLength;
                $mee.css('opacity', 0);
                $('.myself' + i).css('opacity', 1);
            }
        });
    }

    ascii();

    function cvShowing() {

        // show Titles
        $('.js-cvShowTitle').each(function () {

            var $t = $(this),
                shut = false;

            $t.addClass('is-js');

            $(document).scroll(function () {
                if ($(this).scrollTop() + window.innerHeight * 0.47 > $t.offset().top) {
                    if (!shut) {
                        $t.addClass('is-active');
                        shut = true;
                    }
                }
            });
        });

        // show Lists
        $('.js-cvShow').each(function () {

            var $t = $(this),
                shut = false;

            $t.addClass('is-js');

            $(document).scroll(function () {
                if (!shut && $(this).scrollTop() + window.innerHeight * 0.6 > $t.offset().top) {
                    $t.addClass('is-active');
                    shut = true;
                }
            });
        });
    }

    function init() {
        $onWebLink = $('.js-onWeb-site').parent(), baffleWebSite = baffle('.js-onWeb-site'), baffleWebDd = baffle('.js-onWeb-dd');

        $(document).on('mouseenter focus', '.js-onWeb-link', function () {
            var _this = this;

            baffleWebSite.start().text(function (currentText) {
                return $(_this).data('site');
            }).reveal(150, 150);

            baffleWebDd.start().text(function (currentText) {
                return $(_this).data('dd');
            }).reveal(150, 150);

            $onWebLink.attr('href', $(this).attr('href')).attr('target', '_blank');
        }).on('mouseleave', '.js-onWeb-link', function () {
            baffleWebSite.start().text(function (currentText) {
                return intro;
            }).reveal(150, 150);

            baffleWebDd.start().text(function (currentText) {
                return dd;
            }).reveal(150, 150);
            $onWebLink.removeAttr('href');
        });
    }

    return {
        init: init,
        cvShowing: cvShowing
    };
}();

$(function lookIntoOnWww() {
    var $cv = $('#cv'),
        offsetCv,
        windowHeight = window.innerHeight,
        triggerOnWebInit = true;

    $(window).scroll(function () {
        offsetCv = $cv.offset().top;

        if (triggerOnWebInit && $(window).scrollTop() + windowHeight - 45 > offsetCv) {
            triggerOnWebInit = false;

            $('.navCV').remove();
            cvProjects.setProjLoop(true);

            if (!Util.hasTouchEvents) {
                OnWeb.init();
            }

            OnWeb.cvShowing();
        }
    });
});

var Psst = function () {
    var hasTouchEvents = Util.hasTouchEvents,
        chatContent = TalkChat.conversation;

    // change message only for touch mobile (no bot there).
    function showScrollify($jsPsst) {
        var $scrolled = $('.js-scrolled'),
            innerHeight,
            newMargin = 400,
            scrolledRecord = getStorage();

        $jsPsst.find('.psst-title').html(chatContent.behaviour.psstMob[0]);
        $jsPsst.find('.psst-parag').html(chatContent.behaviour.psstMob[1] + '<br><br>');
        $jsPsst.find('button').remove();

        $(window).scroll(function () {
            // check if it is a new record or not
            if ($(window).scrollTop() > scrolledRecord) {
                scrolledRecord = $(window).scrollTop();
                $scrolled.text(scrolledRecord);
            } else {
                $scrolled.text(Math.abs($(window).scrollTop() - scrolledRecord) + ' until new record');
            }

            // increase document height to keep scrolling
            if ($(document).height() <= window.innerHeight + $(window).scrollTop()) {
                newMargin += 800;
                $('#cv').css({ 'margin-bottom': newMargin });
            }
        });

        function getStorage() {
            try {
                // Safari BUG fixed: SecurityError: DOM Exception 18: An attempt was made to break through the security policy of the user agent.
                var storedRecord = localStorage.getItem('scrolledRecord');
                return !isNaN(storedRecord) ? storedRecord : 1;
            } catch (e) {
                return 1;
            }
        }

        (function setStorage() {
            localStorage.setItem('scrolledRecord', JSON.stringify(scrolledRecord));
            setTimeout(function () {
                return setStorage();
            }, 1000);
        })();
    }

    // change message on psstt when clicked on Projects
    function changePsst(context) {
        var $jsPsst = $('.js-psst');

        if (!hasTouchEvents) {
            // trigger focus on bot
            $jsPsst.find('.psst-title').html(chatContent.behaviour[context][0]);
            $jsPsst.find('.psst-parag').html(chatContent.behaviour[context][1]);
            $jsPsst.find('button[name="true"]').remove();
            $jsPsst.find('button[name="false"]').html(chatContent.behaviour[context][2]);
        } else {
            // trigger scroll
            setTimeout(function () {
                showScrollify($jsPsst);
            }, 5000);
        }
    }

    $(function hideBotTrigger() {
        if (hasTouchEvents) {
            $('.js-botTrigger').removeClass('js-botTrigger').addClass('js-scrollify').text('not really');
        }
    });

    $(document).on('click', '.js-botProjects', function () {
        var $NavItemPractice = $('.js-chatSection[data-section="practice"]');
        $NavItemPractice.trigger('click'); // it will call Psst.changePsst().

        if (hasTouchEvents) {
            // FIXME: DRY here please... it's from _chat.js   scrollSafe()
            var wScroll = $(window).scrollTop(),
                wHeight = window.innerHeight,
                pHeight = $NavItemPractice.height(),
                pScroll = $NavItemPractice.offset().top,
                tooClose = pScroll - wScroll + pHeight > wHeight / 2;

            // too close of above the fold || away from the view window
            if (tooClose || pScroll < wScroll) {
                $('body').animate({ scrollTop: pScroll + pHeight - wHeight / 4 * 1 }, 1000, 'swing');
            }
        }
    });

    $(document).on('click', '.js-scrollify', function () {
        showScrollify($('.js-psst'));
    });

    $(document).on('click', '.js-chatSection[data-section="practice"]', function () {
        Psst.changePsst('psstChat');
    });

    return {
        changePsst: changePsst
    };
}();

var Hashs = function () {
    var hash = window.location.hash.replace('#', '');

    if (hash) {
        $(function onDomReady() {

            //i know this has a lot of levels,
            //but this way I can reduce the number of loops by 6
            setTimeout(function () {

                (function watchingNav() {
                    if (Nav.checkIsNavReady()) {
                        console.log('ready');
                        triggerWhateverIsOn(hash);
                    } else {
                        console.log('nop');
                        setTimeout(function () {
                            return watchingNav();
                        }, 300);
                    }
                })();
            }, 3500); // ~ time needed on css to show all header
        });
    }

    function triggerWhateverIsOn(hash) {
        switch (hash) {
            case 'projects':
                $('.js-NavItem[data-section="practice"]').trigger('click');
                // Util.scrollTo($('#btn-pr').offset().top - 60)
                break;
            case 'journey':
                $('.js-NavItem[data-section="journey"]').trigger('click');
                // Util.scrollTo($('#btn-jr').offset().top - 60)
                break;
            // case 'knowledge':
            //     $('#btn-th').trigger('click');
            //     Util.scrollTo($('#btn-th').offset().top - 60)
            //     break;
            // case '008080': //TODO prevent this on touch devices
            // case 'bot':
            //     $('#btn-th').trigger('click');
            //     break;
            default:
                lookIntoProjects(hash);
                break;
        }
    }

    function lookIntoProjects(hash) {

        // convert arrProjects to string, lowercase and array again.
        // and hash with spaces and lowercase to find a match on foundHashOnIndex

        var arrProjects = TalkChat.conversation.practice.projects,
            arrProjsLow = arrProjects.toLocaleString().toLowerCase().split(','),
            hashSpaces = hash.replace(/-/g, ' '),
            hashSpaceLow = hashSpaces.toLowerCase(),
            foundHashOnIndex = arrProjsLow.indexOf(hashSpaceLow);

        if (foundHashOnIndex > -1) {

            //if so, get the match Index and use it to target it on arrProjects.
            // this way we'r sure the correct project name (case sensitive) is passed to Projects();
            Projects.setInitialProject(arrProjects[foundHashOnIndex]);

            $('#btn-pr').trigger('click');
        } else {
            hash = hash.replace(/[^a-zA-Z ]/g, "");
            GAcustom.sendToGA('&ec=hash&ea=' + hash);
        }
    }

    function checkIfNavReady() {
        return ChatNav.isNavReady;
    }

    function set(newHash) {
        newHash = Util.stringSlugLower(newHash);
        console.log('new window location:', newHash);
        // window.location.hash = newHash;
    }
    return {
        set: set
    };
}();

/* exported GAcustom */
var GAcustom = function () {
    var clickN = 0,
        cid,
        // client id
    ea,
        // action
    el = '',
        // label
    ec; // category


    function sendToGA(params) {
        clickN++; // ev = event value

        // ga(function(tracker) {
        //     cid = tracker.get('clientId');
        //     console.log('ga_'+ params);
        //
        //     $.ajax({
        //         url: `https://www.google-analytics.com/collect?v=1&t=event&tid=UA-70069700-3&cid=${cid}${params}&ev=${clickN}`,
        //         type: 'POST',
        //         cache: false,
        //         async: true,
        //         dataType: 'json'
        //     });
        // });
    }

    // track all buttons
    $(document).on('click', 'button', function () {
        var $xthis = $(this);

        ec = $xthis.data('gaec') || 'btn forgotten';
        ea = $xthis.text().replace(/[^a-zA-Z ]/g, ''); // action
        el += ea + '|'; // label

        sendToGA('&ec=' + ec + '&ea=' + ea + '&el=' + el);
    });

    // track all links
    $(document).on('click', 'a', function () {
        var $xthis = $(this);

        ec = $xthis.data('gaec') || 'link forgotten';
        ea = $xthis.data('gaea') || $xthis.text().replace(/[^a-zA-Z ]/g, ''); // action
        el += ea + '|'; // label

        sendToGA('&cid=' + cid + '&ec=' + ec + '&ea=' + ea + '&el=' + el);
    });

    return {
        sendToGA: sendToGA
    };
}();